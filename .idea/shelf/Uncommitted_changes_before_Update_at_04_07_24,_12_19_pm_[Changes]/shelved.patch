Index: partcraft/parts/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\nfrom .models import *\n\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    list_display = ['id', 'parts_brand','parts_category','subcategory_name','parts_price', 'parts_status','parts_offer','main_image']\n#\n@admin.register(ProductImage)\nclass ProductImageAdmin(admin.ModelAdmin):\n    list_display = ['product', 'image']\n\n# admin.site.register(Product)\n\n\n@admin.register(Vehicle)\nclass VehicleAdmin(admin.ModelAdmin):\n    list_display = ['vehicle_name', 'vehicle_model', 'vehicle_year', 'vehicle_type']\n\n@admin.register(Brand)\nclass BrandAdmin(admin.ModelAdmin):\n    list_display = ['brand_name', 'brand_image']\n\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ['category_name', 'category_image']\n\n\n@admin.register(Wishlist)\nclass WishlistAdmin(admin.ModelAdmin):\n    list_display = ['wishlist_name', 'wishlist_product']\n\n\n@admin.register(Cart)\nclass CartAdmin(admin.ModelAdmin):\n    list_display = ['user','session_key', 'product', 'quantity']\n\n@admin.register(Carousel)\nclass CarouselAdmin(admin.ModelAdmin):\n    list_display = ['carousel_image','carousel_category','carousel_code','carousel_brand']\n\n\n\n@admin.register(BillingAddress)\nclass BillingAddressAdmin(admin.ModelAdmin):\n    list_display = ['user', 'billing_name', 'billing_address']\n\n@admin.register(ShippingAddress)\nclass ShippingAddressAdmin(admin.ModelAdmin):\n    list_display = ['user', 'shipping_name', 'shipping_address']\n\n@admin.register(Profile)\nclass ProfileAdmin(admin.ModelAdmin):\n    list_display = ['user', 'preferred_billing_address', 'preferred_shipping_address']\n\n@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = ['order_id', 'order_date', 'product']\n\n@admin.register(ProductOrderCount)\nclass ProductOrderCountAdmin(admin.ModelAdmin):\n    list_display = ['product', 'order_count']
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partcraft/parts/admin.py b/partcraft/parts/admin.py
--- a/partcraft/parts/admin.py	(revision 918c054b05ec26c565ba15e9d17aa3527a6a6056)
+++ b/partcraft/parts/admin.py	(date 1720074270075)
@@ -35,7 +35,7 @@
 class CartAdmin(admin.ModelAdmin):
     list_display = ['user','session_key', 'product', 'quantity']
 
-@admin.register(Carousel)
+@admin.register(carousel)
 class CarouselAdmin(admin.ModelAdmin):
     list_display = ['carousel_image','carousel_category','carousel_code','carousel_brand']
 
Index: partcraft/parts/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\nfrom .models import *\nimport random\n\nclass BrandSerializer(serializers.ModelSerializer):\n    url=serializers.HyperlinkedIdentityField(view_name='brandonedetails')\n    class Meta:\n        model = Brand\n        fields = ['brand_name','brand_image','url']\n\nclass CategorySerializer(serializers.ModelSerializer):\n    url = serializers.HyperlinkedIdentityField(view_name='onecategorydetails')\n    class Meta:\n        model = Category\n        fields = ['category_name','url']\n\nclass VehicleSerializer(serializers.ModelSerializer):\n    url = serializers.HyperlinkedIdentityField(view_name='vehicleonedetail')\n    class Meta:\n        model = Vehicle\n        fields = ['vehicle_name','vehicle_model','vehicle_year','vehicle_type','url']\n\nclass VehicleoneSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Vehicle\n        fields = ['vehicle_name','vehicle_model','vehicle_year','vehicle_type']\n\nclass ProductImageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ProductImage\n        fields = ['id', 'image']\n\nclass WishlistSerializer(serializers.Serializer):\n    class Meta:\n        model = Wishlist\n        fields = ['wishlist_name','wishlist_product']\n        read_only_fields = ['wishlist_name']\n\n    def create(self, validated_data):\n        return Wishlist.objects.create(**validated_data)\n\n\n\nclass OfferSerializer(serializers.ModelSerializer):\n    parts_name = serializers.SerializerMethodField()\n    def arrangename(self,obj):\n        return (f\"{obj.parts_brand.brand_name} \"\n                f\"{obj.parts_category.category_name} \"\n                f\"{obj.subcategory_name} \"\n                f\"{obj.parts_voltage}V \"\n                f\"{obj.parts_fits} \"\n                f\"{obj.parts_litre}L\")\n    def get_parts_name(self, obj):\n        b=self.arrangename(obj)\n        return b.replace('NoneL','').strip()\n    url = serializers.HyperlinkedIdentityField(view_name='offerproduct')\n    class Meta:\n        model = Product\n        fields = ['parts_name','parts_offer','url']\n\nclass ProductSerializer(serializers.ModelSerializer):\n    parts_brand = BrandSerializer()\n    parts_category = CategorySerializer()\n    this_parts_fits = VehicleSerializer(many=True)\n    images = ProductImageSerializer(many=True)\n    parts_name = serializers.SerializerMethodField()\n    final_price=serializers.SerializerMethodField()\n    url=serializers.HyperlinkedIdentityField(view_name='getoneproduct')\n    wishlist=serializers.HyperlinkedIdentityField(view_name='wishlistcreate')\n    is_in_wishlist = serializers.SerializerMethodField()\n    related_products = serializers.SerializerMethodField()\n    similar_products = serializers.SerializerMethodField()\n    addtocart= serializers.HyperlinkedIdentityField(view_name='Cartlistcreate')\n    buynow = serializers.HyperlinkedIdentityField(view_name='buy_now')\n\n    class Meta:\n        model = Product\n        fields = ['id','url','parts_name', 'parts_voltage','subcategory_name',\n                  'parts_litre', 'parts_type', 'parts_description', 'parts_no', 'parts_price', 'parts_offer','final_price',\n                  'parts_status', 'parts_condition', 'parts_warranty', 'parts_specification',\n                  'main_image','images','parts_brand', 'parts_category','this_parts_fits','wishlist','is_in_wishlist','related_products','similar_products','addtocart', 'buynow']\n    def arrangename(self,obj):\n        return (f\"{obj.parts_brand.brand_name} \"\n                f\"{obj.parts_category.category_name} \"\n                f\"{obj.subcategory_name} \"\n                f\"{obj.parts_voltage}V \"\n                f\"{obj.parts_fits} \"\n                f\"{obj.parts_litre}L\")\n    def get_parts_name(self, obj):\n        b=self.arrangename(obj)\n        return b.replace('NoneL','').strip()\n\n\n    def get_final_price(self, obj):\n        discount_amount = obj.parts_price * (obj.parts_offer / 100)\n        final_price = obj.parts_price - discount_amount\n        return final_price\n\n    def get_related_products(self, obj):\n        related_products = Product.objects.filter(\n            parts_category=obj.parts_category\n        ).exclude(subcategory_name=obj.subcategory_name)  # Fetch 4 related products, excluding the current one\n        print(related_products)\n        related_products_list = list(related_products)\n        sample_size = min(4, len(related_products_list))\n        random_related_products = random.sample(related_products_list, sample_size)\n        serializer = ProductoneSerializer(random_related_products, many=True, context=self.context)\n        return serializer.data\n    def get_similar_products(self, obj):\n        print(obj.subcategory_name)\n        related_products = Product.objects.filter(\n            subcategory_name=obj.subcategory_name\n        ).exclude(id=obj.id)  # Fetch 4 related products, excluding the current one\n        print(related_products)\n        serializer = ProductoneSerializer(related_products, many=True, context=self.context)\n        return serializer.data\n    def get_is_in_wishlist(self, obj):\n        request = self.context.get('request', None)\n        if not request.user.is_authenticated:\n            return 'SIGN IN REQUEST'\n        elif request is None:\n            return False\n        return Wishlist.objects.filter(wishlist_name=request.user.id,wishlist_product=obj).exists()\n    def create(self, validated_data):\n        brand_data = validated_data.pop('parts_brand')\n        category_data = validated_data.pop('parts_category')\n        vehicle_data = validated_data.pop('this_parts_fits')\n        images_data = validated_data.pop('images', [])\n\n        brand, created = Brand.objects.get_or_create(**brand_data)\n        category, created = Category.objects.get_or_create(**category_data)\n        vehicle, created = Vehicle.objects.get_or_create(**vehicle_data)\n\n        product = Product.objects.create(parts_brand=brand, parts_category=category, this_parts_fits=vehicle, **validated_data)\n\n        for vehicle in vehicle_data:\n            vehicle_obj, created = Vehicle.objects.get_or_create(**vehicle)\n            product.this_parts_fits.add(vehicle_obj)\n\n        for image_data in images_data:\n            ProductImage.objects.create(product=product, **image_data)\n\n        return product\n\n    def update(self, instance, validated_data):\n        brand_data = validated_data.pop('parts_brand')\n        category_data = validated_data.pop('parts_category')\n        vehicle_data = validated_data.pop('this_parts_fits')\n        images_data = validated_data.pop('images', [])\n\n        instance.parts_brand.name = brand_data.get('name', instance.parts_brand.name)\n        instance.parts_brand.save()\n\n        instance.parts_category.name = category_data.get('name', instance.parts_category.name)\n        instance.parts_category.save()\n\n        instance.this_parts_fits.clear()\n        for vehicle in vehicle_data:\n            vehicle_obj, created = Vehicle.objects.get_or_create(**vehicle)\n            instance.this_parts_fits.add(vehicle_obj)\n\n        instance.subcategory_name = validated_data.get('subcategory_name', instance.subcategory_name)\n        instance.parts_voltage = validated_data.get('parts_voltage', instance.parts_voltage)\n        instance.parts_fits = validated_data.get('parts_fits', instance.parts_fits)\n        instance.parts_litre = validated_data.get('parts_litre', instance.parts_litre)\n        instance.parts_type = validated_data.get('parts_type', instance.parts_type)\n        instance.parts_description = validated_data.get('parts_description', instance.parts_description)\n        instance.parts_no = validated_data.get('parts_no', instance.parts_no)\n        instance.parts_price = validated_data.get('parts_price', instance.parts_price)\n        instance.parts_offer = validated_data.get('parts_offer', instance.parts_offer)\n        instance.parts_status = validated_data.get('parts_status', instance.parts_status)\n        instance.parts_condition = validated_data.get('parts_condition', instance.parts_condition)\n        instance.parts_warranty = validated_data.get('parts_warranty', instance.parts_warranty)\n        instance.parts_specification = validated_data.get('parts_specification', instance.parts_specification)\n        instance.main_image = validated_data.get('main_image', instance.main_image)\n        instance.save()\n\n        # Update images\n        keep_images = []\n        for image_data in images_data:\n            image_id = image_data.get('id')\n            if image_id:\n\n                image_instance = ProductImage.objects.get(id=image_id, product=instance)\n                image_instance.image = image_data.get('image', image_instance.image)\n                image_instance.save()\n                keep_images.append(image_instance.id)\n            else:\n\n                new_image = ProductImage.objects.create(product=instance, **image_data)\n                keep_images.append(new_image.id)\n\n\n        for image_instance in instance.images.all():\n            if image_instance.id not in keep_images:\n                image_instance.delete()\n\n        return instance\n\nclass ProductoneSerializer(serializers.ModelSerializer):\n    parts_name = serializers.SerializerMethodField()\n    final_price = serializers.SerializerMethodField()\n    product_full_detail = serializers.HyperlinkedIdentityField(view_name='getoneproduct')\n    wishlist = serializers.HyperlinkedIdentityField(view_name='wishlistcreate')\n    is_in_wishlist = serializers.SerializerMethodField()\n\n\n    class Meta:\n        model = Product\n        fields = ['id','parts_type' ,'parts_name', 'parts_price', 'parts_offer', 'final_price', 'main_image', 'product_full_detail','wishlist','is_in_wishlist']\n\n    def arrangename(self,obj):\n        return (f\"{obj.parts_brand.brand_name} \"\n                f\"{obj.parts_category.category_name} \"\n                f\"{obj.subcategory_name} \"\n                f\"{obj.parts_voltage}V \"\n                f\"{obj.parts_fits} \"\n                f\"{obj.parts_litre}L\")\n    def get_parts_name(self, obj):\n        b=self.arrangename(obj)\n        return b.replace('NoneL','').strip()\n    def get_final_price(self, obj):\n        discount_amount = obj.parts_price * (obj.parts_offer / 100)\n        final_price = obj.parts_price - discount_amount\n        return final_price\n\n    def get_is_in_wishlist(self, obj):\n        request = self.context.get('request', None)\n        if not request.user.is_authenticated:\n            return 'SIGN IN REQUEST'\n        elif request is None:\n            return False\n        return Wishlist.objects.filter(wishlist_name=request.user.id, wishlist_product=obj).exists()\n\nclass WishallSerializer(serializers.ModelSerializer):\n    wishlist_product=ProductSerializer()\n    wishlist_name = serializers.SerializerMethodField()\n    wishlist_delete=serializers.HyperlinkedIdentityField(view_name='wishdeleteoneitem')\n    # wishlistdelall=serializers.HyperlinkedIdentityField(view_name='wishdeleteitem')\n    class Meta:\n        model = Wishlist\n        fields = ['wishlist_name','wishlist_product','wishlist_delete']\n        read_only_fields = ['wishlist_name']\n\n    def arrangename(self,obj):\n        return (f\"{obj.parts_brand.brand_name} \"\n                f\"{obj.parts_category.category_name} \"\n                f\"{obj.subcategory_name} \"\n                f\"{obj.parts_voltage}V \"\n                f\"{obj.parts_fits} \"\n                f\"{obj.parts_litre}L\")\n    def get_parts_name(self, obj):\n        b=self.arrangename(obj)\n        return b.replace('NoneL','').strip()\n    def get_wishlist_name(self, obj):\n        return obj.wishlist_name.email\n\nclass CartSerializer(serializers.ModelSerializer):\n    user_name=serializers.SerializerMethodField()\n    parts_name = serializers.SerializerMethodField()\n    parts_offer = serializers.SerializerMethodField()\n    parts_price = serializers.SerializerMethodField()\n    discount_amount = serializers.SerializerMethodField()\n    final_price = serializers.SerializerMethodField()\n    main_image=serializers.SerializerMethodField()\n\n    class Meta:\n        model = Cart\n        fields = ['user','user_name','session_key','product','quantity','parts_name','parts_price','parts_offer','discount_amount','final_price','main_image']\n\n    def get_user_name(self, obj):\n        request = self.context.get('request')\n        if request.user.is_authenticated:\n            return obj.user.email\n        else:\n            return None\n    def arrangename(self,product):\n        return (f\"{product.parts_brand.brand_name} \"\n                f\"{product.parts_category.category_name} \"\n                f\"{product.subcategory_name} \"\n                f\"{product.parts_voltage}V \"\n                f\"{product.parts_fits} \"\n                f\"{product.parts_litre}L\")\n\n    def get_parts_name(self, obj):\n        product=obj.product\n        b=self.arrangename(product)\n        return b.replace('NoneL','').strip()\n\n    def get_parts_offer(self,obj):\n        product=obj.product\n        return product.parts_offer\n    def get_parts_price(self,obj):\n        product=obj.product\n        return product.parts_price\n    def get_discount_amount(self,obj):\n        product=obj.product\n        discount_amount = product.parts_price * (product.parts_offer / 100)\n        return discount_amount\n\n\n    def get_final_price(self, obj):\n        product=obj.product\n        print(product.parts_price,product.parts_offer)\n        discount_amount = product.parts_price * (product.parts_offer / 100)\n        final_amount=product.parts_price - discount_amount\n        return final_amount\n\n    def get_main_image(self,obj):\n        product=obj.product\n        return product.main_image\n    def create(self, validated_data):\n        request=self.context.get('request')\n        if request.user.is_authenticated:\n            validated_data['user']=request.user\n        else:\n            validated_data['session_key']=request.session.session_key\n        return Cart.objects.create(**validated_data)\n\n\nclass Carouselserilizers(serializers.ModelSerializer):\n    discount=serializers.SerializerMethodField()\n    ref=serializers.SerializerMethodField()\n    brand=serializers.SerializerMethodField()\n    image=serializers.SerializerMethodField()\n    code=serializers.SerializerMethodField()\n    category=serializers.SerializerMethodField()\n    url=serializers.HyperlinkedIdentityField(view_name='carouseloneview')\n\n\n    class Meta:\n        model=Carousel\n        fields = ['image','discount','category','code','ref','brand','url']\n\n\n    def get_code(self,obj):\n        return obj.carousel_code\n\n    def get_category(self,obj):\n        return obj.carousel_category.category_name\n\n    def get_image(self,obj):\n        return obj.carousel_image\n    def get_discount(self,obj):\n        return f'Get {obj.carousel_offer}% off'\n    def get_ref(self,obj):\n        return f'{obj.carousel_offer}% off {obj.carousel_category.category_name}'\n    def get_brand(self,obj):\n        return f'{obj.carousel_brand.brand_name} brand only'\n\nclass Billaddressserializer(serializers.ModelSerializer):\n    class Meta:\n        model = BillingAddress\n        fields = '__all__'\n\nclass Shippingaddressserializer(serializers.ModelSerializer):\n    class Meta:\n        model = ShippingAddress\n        fields = '__all__'\n\nclass Buynowserilizers(serializers.Serializer):\n    billing_address = Billaddressserializer()\n    shipping_address = Shippingaddressserializer(required=False)\n    use_same_address_for_shipping = serializers.BooleanField(default=False)\n    use_the_address_for_next_time = serializers.BooleanField(default=False)\n\n    def to_internal_value(self, data):\n        return_user = self.context[\"request\"].user\n        if 'billing_address' in data:\n            data['billing_address']['user'] = return_user.id\n        if 'shipping_address' in data:\n            data['shipping_address']['user'] = return_user.id\n\n        return super().to_internal_value(data)\n\n    def create(self, validated_data):\n        billing_address_data = validated_data.pop('billing_address')\n        use_same_address_for_shipping = validated_data.pop('use_same_address_for_shipping', False)\n        use_the_address_for_next_time = validated_data.pop('use_the_address_for_next_time', False)\n        user = self.context['request'].user\n\n        # Create BillingAddress instance\n        billing_address_data['user'] = user\n        billing_instance = BillingAddress.objects.create(**billing_address_data)\n\n        print(billing_instance)\n\n        shipping_instance = None\n        if use_same_address_for_shipping:\n            shipping_address_data = {\n                'user': user,\n                'shipping_name': billing_instance.billing_name,\n                'email': billing_instance.email,\n                'shipping_address': billing_instance.billing_address,\n                'contact': billing_instance.contact,\n            }\n            shipping_instance = ShippingAddress.objects.create(**shipping_address_data)\n        else:\n            shipping_address_data = validated_data.pop('shipping_address', None)\n            if shipping_address_data:\n                shipping_address_data['user'] = user\n                shipping_instance = ShippingAddress.objects.create(**shipping_address_data)\n\n        if use_the_address_for_next_time:\n            user_profile, created = Profile.objects.get_or_create(user=user)\n            user_profile.preferred_billing_address = billing_instance\n            user_profile.preferred_shipping_address = shipping_instance\n            user_profile.save()\n\n        return {\n            \"billing_address\": billing_instance,\n            \"shipping_address\": shipping_instance,\n        }\n\nclass OrderSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Order\n        fields = ['order_id', 'order_date']\n\nclass Bestsellingserializer(serializers.ModelSerializer):\n    parts_type = serializers.SerializerMethodField(source='product.parts_type')\n    parts_name = serializers.SerializerMethodField()\n    parts_price = serializers.SerializerMethodField()\n    parts_offer = serializers.SerializerMethodField()\n    final_price = serializers.SerializerMethodField()\n    main_image = serializers.SerializerMethodField()\n    product_full_detail = serializers.HyperlinkedIdentityField(view_name='getoneproduct')\n    wishlist = serializers.HyperlinkedIdentityField(view_name='wishlistcreate')\n    is_in_wishlist = serializers.SerializerMethodField()\n    class Meta:\n        model = ProductOrderCount\n        fields = ['id', 'parts_type', 'parts_name', 'parts_price', 'parts_offer', 'final_price', 'main_image', 'product_full_detail', 'wishlist', 'is_in_wishlist']\n\n    def get_parts_type(self, obj):\n        return obj.product.parts_type\n    def arrangename(self, obj):\n        product = obj.product\n        return (f\"{product.parts_brand.brand_name} \"\n                f\"{product.parts_category.category_name} \"\n                f\"{product.subcategory_name} \"\n                f\"{product.parts_voltage}V \"\n                f\"{product.parts_fits} \"\n                f\"{product.parts_litre}L\")\n\n    def get_parts_name(self, obj):\n        b = self.arrangename(obj)\n        return b.replace('NoneL', '').strip()\n\n    def get_parts_price(self, obj):\n        return obj.product.parts_price\n\n    def get_parts_offer(self, obj):\n        return obj.product.parts_offer\n\n    def get_final_price(self, obj):\n        product = obj.product\n        discount_amount = product.parts_price * (product.parts_offer / 100)\n        final_price = product.parts_price - discount_amount\n        return final_price\n\n    def get_main_image(self, obj):\n        return obj.product.main_image\n\n    def get_is_in_wishlist(self, obj):\n        request = self.context.get('request', None)\n        if not request.user.is_authenticated:\n            return 'SIGN IN REQUEST'\n        elif request is None:\n            return False\n        return Wishlist.objects.filter(wishlist_name=request.user.id, wishlist_product=obj).exists()\n\nclass Carouselpostserializer(serializers.ModelSerializer):\n    # code=serializers.SerializerMethodField()\n\n    class Meta:\n        model=Carousel\n        fields=['carousel_code']\n\n    # def get_code(self,obj):\n    #     return obj.carousel_code
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partcraft/parts/serializers.py b/partcraft/parts/serializers.py
--- a/partcraft/parts/serializers.py	(revision 918c054b05ec26c565ba15e9d17aa3527a6a6056)
+++ b/partcraft/parts/serializers.py	(date 1720074270075)
@@ -329,7 +329,7 @@
 
 
     class Meta:
-        model=Carousel
+        model=carousel
         fields = ['image','discount','category','code','ref','brand','url']
 
 
@@ -473,7 +473,7 @@
     # code=serializers.SerializerMethodField()
 
     class Meta:
-        model=Carousel
+        model=carousel
         fields=['carousel_code']
 
     # def get_code(self,obj):
Index: partcraft/parts/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from itertools import product\n\nfrom django.db import models\nfrom django.conf import settings\nimport os\nimport uuid\nfrom datetime import datetime\nimport random\nclass Vehicle(models.Model):\n    STATUS_CHOICES = (\n        ('petrol', 'petrol'),\n        ('diesel', 'diesel')\n    )\n    vehicle_name = models.CharField(max_length=50)\n    vehicle_model = models.CharField(max_length=50)\n    vehicle_year = models.IntegerField()\n    vehicle_type = models.CharField(choices=STATUS_CHOICES, max_length=50)\n\n    def __str__(self):\n        return f'{self.vehicle_name} {self.vehicle_model} {self.vehicle_year} {self.vehicle_type}'\n\n\nclass Brand(models.Model):\n    brand_name = models.CharField(max_length=50)\n    brand_image = models.URLField(max_length=200)\n\n    def __str__(self):\n        return self.brand_name\n\n\nclass Category(models.Model):\n    category_name = models.CharField(max_length=50)\n    category_image = models.URLField(max_length=200,blank=True)\n\n    def __str__(self):\n        return self.category_name\n\n# def get_unique_file_path(instance, filename):\n#     # Extract the file extension from the original file name\n#     ext = filename.split('.')[-1]\n#     # Generate a new file name using UUID\n#     new_filename = f\"{uuid.uuid4()}.{ext}\"\n#     # Define the subdirectory within the media root where files will be stored\n#     return os.path.join('products', new_filename)\n\nclass Product(models.Model):\n    TYPE_CHOICES = (\n        ('OE', 'OE'),\n        ('AFTERMARKET', 'AFTERMARKET'),\n    )\n    STATUS_CHOICES = (\n        ('in stock', 'in stock'),\n        ('out of stock', 'out of stock'),\n    )\n    CONDITION_CHOICES = (\n        ('New','New'),\n        ('Refurbished','Refurbished'),\n    )\n\n\n    parts_brand = models.ForeignKey(Brand, on_delete=models.CASCADE)\n    parts_category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    subcategory_name = models.CharField(max_length=255)\n    parts_voltage = models.IntegerField()\n    parts_fits = models.CharField(max_length=255,blank=True)\n    parts_litre = models.FloatField(blank=True, null=True)\n    parts_type = models.CharField(choices=TYPE_CHOICES, max_length=255)\n    parts_description = models.TextField()\n    parts_no= models.CharField(max_length=255)\n    parts_price = models.IntegerField(default=0)\n    parts_offer= models.IntegerField()\n    parts_status = models.CharField(choices=STATUS_CHOICES, max_length=255)\n    parts_condition = models.CharField(choices=CONDITION_CHOICES, max_length=255)\n    parts_warranty= models.IntegerField()\n    parts_specification=models.TextField()\n    this_parts_fits=models.ManyToManyField(Vehicle)\n    main_image = models.URLField(max_length=200)\n\n    def __str__(self):\n        return f'{self.parts_brand}-{self.parts_category}-{self.subcategory_name}'\n\n\nclass ProductImage(models.Model):\n    product = models.ForeignKey(Product, related_name='images', on_delete=models.CASCADE)\n    image = models.URLField(max_length=200)\n\n    def __str__(self):\n        return f'{self.product.subcategory_name} - {self.id}'\n\n\nclass Wishlist(models.Model):\n    wishlist_name=models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    wishlist_product=models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.wishlist_name} {self.wishlist_product}'\n\n\nclass Carousel(models.Model):\n    carousel_image=models.URLField(max_length=200)\n    carousel_offer=models.IntegerField(default=0)\n    carousel_category= models.ForeignKey(Category, on_delete=models.CASCADE)\n    carousel_code=models.CharField(max_length=255)\n    carousel_brand=models.ForeignKey(Brand, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.carousel_code} {self.carousel_brand}'\nclass Cart(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE,blank=True,null=True)\n    session_key = models.CharField(max_length=40, null=True, blank=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.IntegerField(default=1)\n    code=models.ManyToManyField(Carousel,blank=True)\n\n    def __str__(self):\n        return f'{self.user or self.session_key} {self.product} {self.quantity}'\n\n\n\n\nclass BillingAddress(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    billing_name = models.CharField(max_length=255)\n    gst_number = models.CharField(max_length=16, blank=True, null=True)\n    email = models.EmailField(max_length=255)\n    billing_address = models.CharField(max_length=1000)\n    contact = models.CharField(max_length=13)\n    use_same_address_for_shipping = models.BooleanField(default=False)\n    use_the_address_for_next_time = models.BooleanField(default=False)\n\n    def __str__(self):\n        return f'{self.billing_name} {self.billing_address}'\n\nclass ShippingAddress(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    shipping_name = models.CharField(max_length=255)\n    email = models.EmailField(max_length=255)\n    shipping_address = models.CharField(max_length=1000)\n    contact = models.CharField(max_length=13)\n\n    def __str__(self):\n        return f'{self.shipping_name} {self.shipping_address}'\n\nclass Profile(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    preferred_billing_address = models.ForeignKey(BillingAddress, null=True, blank=True, on_delete=models.SET_NULL, related_name='preferred_billing_user')\n    preferred_shipping_address = models.ForeignKey(ShippingAddress, null=True, blank=True, on_delete=models.SET_NULL, related_name='preferred_shipping_user')\n    def __str__(self):\n        return f\"Profile for {self.user}\"\n\n\ndef order_gen_id():\n    timestamp = datetime.now().strftime('%m%d%Y')\n    num = random.randint(100000, 999999)\n    return f'{timestamp}_{num}'\n\nclass Order(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    shipping_address = models.ForeignKey(ShippingAddress, on_delete=models.SET_NULL, null=True, blank=True)\n    billing_address = models.ForeignKey(BillingAddress, on_delete=models.SET_NULL, null=True, blank=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    order_id = models.CharField(max_length=20, unique=True)\n    order_date = models.DateField(auto_now_add=True)\n    quantity = models.IntegerField(default=1)\n\n    def __str__(self):\n        return f'{self.order_id} {self.product}'\n\n    def save(self, *args, **kwargs):\n        if not self.order_id:\n            self.order_id = order_gen_id()\n        super(Order, self).save(*args, **kwargs)\n\nclass ProductOrderCount(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    order_count = models.IntegerField(default=0)\n\n    def __str__(self):\n        return f'{self.product} - {self.order_count}'
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partcraft/parts/models.py b/partcraft/parts/models.py
--- a/partcraft/parts/models.py	(revision 918c054b05ec26c565ba15e9d17aa3527a6a6056)
+++ b/partcraft/parts/models.py	(date 1720074270075)
@@ -96,7 +96,7 @@
         return f'{self.wishlist_name} {self.wishlist_product}'
 
 
-class Carousel(models.Model):
+class carousel(models.Model):
     carousel_image=models.URLField(max_length=200)
     carousel_offer=models.IntegerField(default=0)
     carousel_category= models.ForeignKey(Category, on_delete=models.CASCADE)
@@ -110,7 +110,7 @@
     session_key = models.CharField(max_length=40, null=True, blank=True)
     product = models.ForeignKey(Product, on_delete=models.CASCADE)
     quantity = models.IntegerField(default=1)
-    code=models.ManyToManyField(Carousel,blank=True)
+    code=models.ManyToManyField(carousel,blank=True)
 
     def __str__(self):
         return f'{self.user or self.session_key} {self.product} {self.quantity}'
Index: partcraft/parts/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Generated by Django 5.0.6 on 2024-07-03 05:16\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Brand',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('brand_name', models.CharField(max_length=50)),\n                ('brand_image', models.URLField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category_name', models.CharField(max_length=50)),\n                ('category_image', models.URLField(blank=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Vehicle',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('vehicle_name', models.CharField(max_length=50)),\n                ('vehicle_model', models.CharField(max_length=50)),\n                ('vehicle_year', models.IntegerField()),\n                ('vehicle_type', models.CharField(choices=[('petrol', 'petrol'), ('diesel', 'diesel')], max_length=50)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='BillingAddress',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('billing_name', models.CharField(max_length=255)),\n                ('gst_number', models.CharField(blank=True, max_length=16, null=True)),\n                ('email', models.EmailField(max_length=255)),\n                ('billing_address', models.CharField(max_length=1000)),\n                ('contact', models.CharField(max_length=13)),\n                ('use_same_address_for_shipping', models.BooleanField(default=False)),\n                ('use_the_address_for_next_time', models.BooleanField(default=False)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Carousel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('carousel_image', models.URLField()),\n                ('carousel_offer', models.IntegerField(default=0)),\n                ('carousel_code', models.CharField(max_length=255)),\n                ('carousel_brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parts.brand')),\n                ('carousel_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parts.category')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('subcategory_name', models.CharField(max_length=255)),\n                ('parts_voltage', models.IntegerField()),\n                ('parts_fits', models.CharField(blank=True, max_length=255)),\n                ('parts_litre', models.FloatField(blank=True, null=True)),\n                ('parts_type', models.CharField(choices=[('OE', 'OE'), ('AFTERMARKET', 'AFTERMARKET')], max_length=255)),\n                ('parts_description', models.TextField()),\n                ('parts_no', models.CharField(max_length=255)),\n                ('parts_price', models.IntegerField(default=0)),\n                ('parts_offer', models.IntegerField()),\n                ('parts_status', models.CharField(choices=[('in stock', 'in stock'), ('out of stock', 'out of stock')], max_length=255)),\n                ('parts_condition', models.CharField(choices=[('New', 'New'), ('Refurbished', 'Refurbished')], max_length=255)),\n                ('parts_warranty', models.IntegerField()),\n                ('parts_specification', models.TextField()),\n                ('main_image', models.URLField()),\n                ('parts_brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parts.brand')),\n                ('parts_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parts.category')),\n                ('this_parts_fits', models.ManyToManyField(to='parts.vehicle')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Cart',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('session_key', models.CharField(blank=True, max_length=40, null=True)),\n                ('quantity', models.IntegerField(default=1)),\n                ('code', models.ManyToManyField(blank=True, to='parts.carousel')),\n                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parts.product')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='ProductImage',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('image', models.URLField()),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='parts.product')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='ProductOrderCount',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('order_count', models.IntegerField(default=0)),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parts.product')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='ShippingAddress',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('shipping_name', models.CharField(max_length=255)),\n                ('email', models.EmailField(max_length=255)),\n                ('shipping_address', models.CharField(max_length=1000)),\n                ('contact', models.CharField(max_length=13)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Profile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('preferred_billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_billing_user', to='parts.billingaddress')),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n                ('preferred_shipping_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_shipping_user', to='parts.shippingaddress')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Order',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('order_id', models.CharField(max_length=20, unique=True)),\n                ('order_date', models.DateField(auto_now_add=True)),\n                ('quantity', models.IntegerField(default=1)),\n                ('billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='parts.billingaddress')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parts.product')),\n                ('shipping_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='parts.shippingaddress')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Wishlist',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('wishlist_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n                ('wishlist_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parts.product')),\n            ],\n        ),\n    ]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partcraft/parts/migrations/0001_initial.py b/partcraft/parts/migrations/0001_initial.py
--- a/partcraft/parts/migrations/0001_initial.py	(revision 918c054b05ec26c565ba15e9d17aa3527a6a6056)
+++ b/partcraft/parts/migrations/0001_initial.py	(date 1719920413882)
@@ -1,4 +1,4 @@
-# Generated by Django 5.0.6 on 2024-07-03 05:16
+# Generated by Django 5.0.6 on 2024-07-02 09:18
 
 import django.db.models.deletion
 from django.conf import settings
@@ -55,7 +55,7 @@
             ],
         ),
         migrations.CreateModel(
-            name='Carousel',
+            name='carousel',
             fields=[
                 ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                 ('carousel_image', models.URLField()),
Index: .idea/shelf/Changes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><changelist name=\"Changes\" date=\"1719920544326\" recycled=\"false\">\n  <option name=\"PATH\" value=\"$PROJECT_DIR$/.idea/shelf/Changes/shelved.patch\" />\n  <option name=\"DESCRIPTION\" value=\"Changes\" />\n</changelist>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Changes.xml b/.idea/shelf/Changes.xml
--- a/.idea/shelf/Changes.xml	(revision 918c054b05ec26c565ba15e9d17aa3527a6a6056)
+++ b/.idea/shelf/Changes.xml	(date 1720074602423)
@@ -1,4 +1,4 @@
-<changelist name="Changes" date="1719920544326" recycled="false">
+<changelist name="Changes" date="1720074578232" recycled="false" deleted="true">
   <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Changes/shelved.patch" />
   <option name="DESCRIPTION" value="Changes" />
 </changelist>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"8a259d45-3f5d-4858-a05d-0f3155ed5749\" name=\"Changes\" comment=\"Email and views are changed\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Changes.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Changes.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/partcraft/parts/admin.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/partcraft/parts/admin.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/partcraft/parts/migrations/0001_initial.py\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/partcraft/parts/migrations/__init__.py\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/partcraft/parts/models.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/partcraft/parts/models.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/partcraft/parts/serializers.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/partcraft/parts/serializers.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/partcraft/parts/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/partcraft/parts/views.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Dockerfile\" />\n        <option value=\"package.json\" />\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;DhanushpathiPrakash&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/Nandhaad3/partcraft.git&quot;,\n    &quot;accountId&quot;: &quot;50aaa3d5-14e2-4a1f-a422-41718d8ff016&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;customColor&quot;: &quot;&quot;,\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2hgNzB08wPlerAFDK8Frw8IFq0S\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;last_opened_file_path&quot;: &quot;E:/partcraft/partcraft/account/migrations&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;project.propVCSSupport.DirectoryMappings&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"E:\\partcraft\\partcraft\\account\\migrations\" />\n      <recent name=\"E:\\partcraft\\partcraft\\user\" />\n      <recent name=\"E:\\partcraft\\partcraft\" />\n      <recent name=\"E:\\partcraft\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-PY-241.17890.14\" />\n        <option value=\"bundled-python-sdk-5b207ade9991-7e9c3bbb6e34-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.17890.14\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"8a259d45-3f5d-4858-a05d-0f3155ed5749\" name=\"Changes\" comment=\"\" />\n      <created>1718012024179</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1718012024179</updated>\n      <workItem from=\"1718012025723\" duration=\"2217000\" />\n      <workItem from=\"1718083684590\" duration=\"7961000\" />\n      <workItem from=\"1718096774607\" duration=\"2387000\" />\n      <workItem from=\"1718099267036\" duration=\"2353000\" />\n      <workItem from=\"1718101796895\" duration=\"6668000\" />\n      <workItem from=\"1718167973828\" duration=\"10349000\" />\n      <workItem from=\"1718183620064\" duration=\"381000\" />\n      <workItem from=\"1718184979238\" duration=\"1422000\" />\n      <workItem from=\"1718253806197\" duration=\"7550000\" />\n      <workItem from=\"1718270061287\" duration=\"18123000\" />\n      <workItem from=\"1718341188949\" duration=\"7558000\" />\n      <workItem from=\"1718353261297\" duration=\"5838000\" />\n      <workItem from=\"1718601464038\" duration=\"8620000\" />\n      <workItem from=\"1718616009069\" duration=\"11291000\" />\n      <workItem from=\"1718687229470\" duration=\"78000\" />\n      <workItem from=\"1718688360866\" duration=\"9603000\" />\n      <workItem from=\"1718713020277\" duration=\"7743000\" />\n      <workItem from=\"1718771710244\" duration=\"3816000\" />\n      <workItem from=\"1718792515062\" duration=\"2434000\" />\n      <workItem from=\"1718860021274\" duration=\"11441000\" />\n      <workItem from=\"1718876732887\" duration=\"5641000\" />\n      <workItem from=\"1719207152951\" duration=\"679000\" />\n      <workItem from=\"1719381912328\" duration=\"877000\" />\n      <workItem from=\"1719388485710\" duration=\"2821000\" />\n      <workItem from=\"1719809616446\" duration=\"7465000\" />\n      <workItem from=\"1719896893706\" duration=\"3361000\" />\n      <workItem from=\"1719911220909\" duration=\"1334000\" />\n      <workItem from=\"1719927692520\" duration=\"2106000\" />\n      <workItem from=\"1719945704578\" duration=\"3690000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Bestselling&#10;created a best selling serializers and view class\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1719927873529</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1719927873529</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Email and views are changed\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1719928461267</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1719928461267</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Email and views are changed\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1719946992021</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1719946992021</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Email and views are changed\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1719948760742</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1719948760742</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <ignored-roots>\n      <path value=\"$PROJECT_DIR$/partcraft\" />\n    </ignored-roots>\n    <MESSAGE value=\"update\" />\n    <MESSAGE value=\"Bestselling&#10;created a best selling serializers and view class\" />\n    <MESSAGE value=\"Email and views are changed\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Email and views are changed\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 918c054b05ec26c565ba15e9d17aa3527a6a6056)
+++ b/.idea/workspace.xml	(date 1720075578072)
@@ -5,13 +5,7 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="8a259d45-3f5d-4858-a05d-0f3155ed5749" name="Changes" comment="Email and views are changed">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Changes.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Changes.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/partcraft/parts/admin.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/parts/admin.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/partcraft/parts/migrations/0001_initial.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/partcraft/parts/migrations/__init__.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/partcraft/parts/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/parts/models.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/partcraft/parts/serializers.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/parts/serializers.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/partcraft/parts/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/parts/views.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
