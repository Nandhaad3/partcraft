Index: partcraft/parts/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nfrom django.db.migrations import serializer\r\nfrom django.shortcuts import render\r\nfrom django_filters.rest_framework import DjangoFilterBackend\r\nfrom elasticsearch import NotFoundError\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.permissions import IsAdminUser, IsAuthenticatedOrReadOnly, IsAuthenticated\r\nfrom rest_framework import status, generics\r\nfrom rest_framework.exceptions import NotFound\r\nfrom rest_framework.filters import SearchFilter, OrderingFilter\r\nfrom rest_framework.pagination import PageNumberPagination\r\nfrom rest_framework.decorators import api_view\r\nfrom django.db.models import F, CharField, Value\r\nfrom django.db.models.functions import Concat\r\nfrom rest_framework import viewsets\r\nfrom django.shortcuts import get_object_or_404\r\nfrom .models import *\r\nfrom .serializers import *\r\nfrom collections import defaultdict\r\nfrom .filter import OfferfilterSet\r\nfrom account.emails import send_confirmation_email\r\nimport base64\r\nfrom django_elasticsearch_dsl_drf.viewsets import DocumentViewSet\r\nfrom django_elasticsearch_dsl_drf.filter_backends import FilteringFilterBackend, CompoundSearchFilterBackend\r\nfrom .documents import ProductDocument\r\n\r\ndef adddict(serializer):\r\n    last_data = []\r\n    for i in serializer.data:\r\n        data = {}\r\n        data['id'] = i['id']\r\n        data['parts_type'] = i['parts_type']\r\n        data['main_image'] = i['main_image']\r\n        data['brand_image'] = i['parts_brand']['brand_image']\r\n        d = (f\"{i['parts_brand']['brand_name']} \"\r\n             f\"{i['parts_category']['category_name']} \"\r\n             f'{i[\"subcategory_name\"]}'\r\n             f\"{i['parts_voltage']} \"\r\n             f\"{i['parts_litre']}L \")\r\n        data['parts__Name'] = d.replace('NoneL', '').strip()\r\n        data['parts_no'] = i['parts_no']\r\n        data['parts_offer'] = i['parts_offer']\r\n        data['parts_price'] = i['parts_price']\r\n        dis = i['parts_price'] * (i['parts_offer'] / 100)\r\n        data['final_price'] = i['parts_price'] - dis\r\n        data['product_full_detail'] = i['url']\r\n        data['is_in_wishlist'] = i['is_in_wishlist']\r\n        if i['is_in_wishlist'] is False:\r\n            data['wishlist'] = i['wishlist']\r\n            data['is_in_wishlist'] = i['is_in_wishlist']\r\n        elif i['is_in_wishlist'] is True:\r\n            data['is_in_wishlist'] = i['is_in_wishlist']\r\n\r\n        last_data.append(data)\r\n    return last_data\r\n\r\n\r\nclass CustomPagination(PageNumberPagination):\r\n    page_size = 2\r\n    page_size_query_param = 'size'\r\n    max_page_size = 10\r\n\r\n\r\n# def offerdata(queryset):\r\n#     return queryset.values_list('parts_offer', flat=True).distinct()\r\n\r\nclass partslistview(generics.ListAPIView):\r\n    # queryset = Product.objects.all()\r\n    # print(queryset)\r\n    permission_classes = [IsAuthenticatedOrReadOnly]\r\n    queryset = Product.objects.annotate(\r\n        parts_name=Concat(\r\n            F('parts_brand__brand_name'),\r\n            Value(' '),\r\n            F('parts_category__category_name'),\r\n            Value(' '),\r\n            F('subcategory_name'),\r\n            Value(' '),\r\n            F('parts_voltage'),\r\n            Value('V'),\r\n            output_field=CharField()\r\n        )\r\n    )\r\n    serializer_class = ProductSerializer\r\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\r\n    filterset_class = OfferfilterSet\r\n    search_fields = ['parts_brand__brand_name', 'parts_category__category_name', 'parts_name', 'subcategory_name']\r\n    ordering_fields = ['parts_name', 'parts_price']\r\n    pagination_class = CustomPagination\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.filter_queryset(self.get_queryset())\r\n        #print(queryset)\r\n        if not queryset.exists():\r\n            raise NotFound(detail=\"No Product found matching the criteria.\")\r\n        page = self.paginate_queryset(queryset)\r\n        if page is not None:\r\n            serializer = self.get_serializer(page, many=True, context={'request': request})\r\n            lastdata = adddict(serializer)\r\n            return self.get_paginated_response(lastdata)\r\n        serializer = self.get_serializer(queryset, many=True, context={'request': request})\r\n        lastdata = adddict(serializer)\r\n        # offer=offerdata(queryset)\r\n        return Response(lastdata, status=status.HTTP_200_OK)\r\n\r\n\r\n# localhost:9200/product/_search?pretty=\r\n# localhost:9200/product/\r\n# localhost:9200/product/_mapping?pretty\r\nclass partslistsDocumentView(DocumentViewSet):\r\n    document = ProductDocument\r\n    serializer_class = ProductoneSerializer\r\n    filter_backends = [FilteringFilterBackend, CompoundSearchFilterBackend]\r\n    query_backends = [CompoundSearchFilterBackend]\r\n    filter_fields = {\r\n        'parts_brand': 'parts_brand',\r\n        'parts_category': 'parts_category',\r\n        'subcategory_name': 'subcategory_name',\r\n        'parts_no': 'parts_no',\r\n        'parts_fits': 'parts_fits',\r\n        'parts_type': 'parts_type',\r\n    }\r\n    search_fields = ['parts_brand', 'parts_category', 'subcategory_name', 'parts_no', 'parts_fits', 'parts_type']\r\n    multi_match_search_fields = ['parts_brand', 'parts_category', 'subcategory_name', 'parts_no', 'parts_fits', 'parts_type']\r\n    pagination_class = CustomPagination\r\n\r\n    def get_queryset(self):\r\n        search_query = self.request.query_params.get('search', '').strip()\r\n        min_price = self.request.query_params.get('min_price')\r\n        max_price = self.request.query_params.get('max_price')\r\n        min_offer = self.request.query_params.get('min_offer')\r\n        max_offer = self.request.query_params.get('max_offer')\r\n\r\n        search = self.document.search()\r\n        print(search.to_dict())\r\n        if search_query:\r\n            search = search.query('bool', should=[\r\n            {'match': {'parts_brand': search_query}},\r\n            {'match': {'parts_category': search_query}},\r\n            {'match': {'subcategory_name': search_query}},\r\n            {'match': {'parts_no': search_query}},\r\n            {'match': {'parts_fits': search_query}},\r\n            {'match': {'parts_type': search_query}}\r\n        ])\r\n\r\n        if min_offer or max_offer:\r\n            offer_filter = {}\r\n            if min_offer:\r\n                offer_filter['gte'] = int(min_offer)\r\n            if max_offer:\r\n                offer_filter['lte'] = int(max_offer)\r\n            search = search.filter('range', parts_offer=offer_filter)\r\n\r\n        if min_price or max_price:\r\n            price_filter = {}\r\n            if min_price:\r\n                price_filter['gte'] = float(min_price)\r\n            if max_price:\r\n                price_filter['lte'] = float(max_price)\r\n            search = search.filter('range', final_price=price_filter)\r\n\r\n        return search\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.filter_queryset(self.get_queryset())\r\n        response = queryset.execute()\r\n        print(response)\r\n        if not response.hits:\r\n            return Response({\"detail\": \"No Product found matching the criteria.\"}, status=status.HTTP_404_NOT_FOUND)\r\n        hit_ids = [hit.meta.id for hit in response.hits]\r\n        queryset = Product.objects.filter(id__in=hit_ids)\r\n        page = self.paginate_queryset(queryset)\r\n        if page is not None:\r\n            serializer = self.get_serializer(page, many=True, context={'request': request})\r\n            return self.get_paginated_response(serializer.data)\r\n        serializer = self.get_serializer(queryset, many=True, context={'request': request})\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\nclass partsonedetail(generics.RetrieveAPIView):\r\n    serializer_class = ProductSerializer\r\n    permission_classes = [IsAuthenticatedOrReadOnly]\r\n\r\n    def get_queryset(self):\r\n        product_id = self.kwargs.get('pk')\r\n        queryset = Product.objects.filter(id=product_id)\r\n        return queryset\r\n\r\n    def get(self, request, *args, **kwargs):\r\n        queryset = self.get_queryset()\r\n        if not queryset.exists():\r\n            return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n        product = queryset.first()\r\n        serializer = self.get_serializer(product)\r\n        data = serializer.data\r\n\r\n        if data.get('is_in_wishlist'):\r\n            data.pop('wishlist', None)\r\n\r\n        return Response(data, status=status.HTTP_200_OK)\r\n\r\n\r\nclass categorylistview(generics.ListAPIView):\r\n    queryset = Category.objects.all()\r\n    serializer_class = CategorySerializer\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.filter_queryset(self.get_queryset())\r\n        if not queryset.exists():\r\n            raise NotFound(detail=\"No Category found matching the criteria.\")\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        print(serializer)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\nclass categoryonedetail(generics.ListAPIView):\r\n    serializer_class = ProductSerializer\r\n\r\n    def get_queryset(self):\r\n        category_id = self.kwargs.get('pk')\r\n        cat = Category.objects.get(id=category_id)\r\n        quaryset = Product.objects.all().filter(parts_category_id=cat.id)\r\n        return quaryset\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.get_queryset()\r\n        category_id = self.kwargs.get('pk')\r\n        cat = Category.objects.get(id=category_id)\r\n        if not queryset.exists():\r\n            return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        category_serializer = CategorySerializer(cat, context={'request': request})\r\n        lastdata = adddict(serializer)\r\n        return Response({'brand': category_serializer.data, 'parts': lastdata}, status=status.HTTP_200_OK)\r\n\r\n\r\nclass brandlistview(generics.ListAPIView):\r\n    queryset = Brand.objects.all()\r\n    serializer_class = BrandSerializer\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.filter_queryset(self.get_queryset())\r\n        if not queryset.exists():\r\n            raise NotFound(detail=\"No Brand found matching the criteria.\")\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\nclass brandonedetail(generics.ListAPIView):\r\n    serializer_class = ProductSerializer\r\n\r\n    def get_queryset(self):\r\n        brand_id = self.kwargs.get('pk')\r\n        brand = Brand.objects.get(id=brand_id)\r\n        queryset = Product.objects.all().filter(parts_brand_id=brand)\r\n        return queryset\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.get_queryset()\r\n        brand_id = self.kwargs.get('pk')\r\n        brand = Brand.objects.get(id=brand_id)\r\n        if not queryset.exists():\r\n            return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        brand_serializer = BrandSerializer(brand, context={'request': request})\r\n        lastdata = adddict(serializer)\r\n        return Response({'brand': brand_serializer.data, 'parts': lastdata}, status=status.HTTP_200_OK)\r\n\r\n\r\nclass vehiclelistview(generics.ListAPIView):\r\n    queryset = Vehicle.objects.all()\r\n    serializer_class = VehicleSerializer\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.filter_queryset(self.get_queryset())\r\n        if not queryset.exists():\r\n            raise NotFound(detail=\"No Vehicle found matching the criteria.\")\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\n@api_view(['POST', 'GET'])\r\ndef vehicle_view(request):\r\n    if request.method == 'POST':\r\n        vehicleserializer = VehicleoneSerializer(data=request.data)\r\n        if vehicleserializer.is_valid():\r\n            try:\r\n                vehicle = Vehicle.objects.get(\r\n                    vehicle_name=vehicleserializer.validated_data['vehicle_name'],\r\n                    vehicle_type=vehicleserializer.validated_data['vehicle_type'],\r\n                    vehicle_model=vehicleserializer.validated_data['vehicle_model'],\r\n                    vehicle_year=vehicleserializer.validated_data['vehicle_year'],\r\n                )\r\n                this_part = Product.objects.filter(this_parts_fits=vehicle)\r\n                print(this_part)\r\n                productserializer = ProductSerializer(this_part, context={'request': request}, many=True)\r\n                lastdata = adddict(productserializer)\r\n                return Response({\r\n                    'vehicle': vehicleserializer.data,\r\n                    'parts': lastdata\r\n                }, status=status.HTTP_200_OK)\r\n            except Vehicle.DoesNotExist:\r\n                return Response({'detail': 'Vehicle not found.'}, status=status.HTTP_404_NOT_FOUND)\r\n        else:\r\n            return Response(vehicleserializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n    elif request.method == 'GET':\r\n        queryset = Vehicle.objects.all()\r\n        serializer = VehicleSerializer(queryset, many=True, context={'request': request})\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\nclass vehicleoneview(generics.ListAPIView):\r\n    serializer_class = ProductSerializer\r\n\r\n    def get_queryset(self):\r\n        vehicle_id = self.kwargs.get('pk')\r\n        vehicle = Vehicle.objects.get(id=vehicle_id)\r\n        queryset = Product.objects.all().filter(this_parts_fits=vehicle)\r\n        return queryset\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.get_queryset()\r\n        vehicle_id = self.kwargs.get('pk')\r\n        vehicle = Vehicle.objects.get(id=vehicle_id)\r\n        if not queryset.exists():\r\n            return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)\r\n        serializer = self.get_serializer(queryset, many=True, context={'request': request})\r\n        vehicle_serializer = VehicleSerializer(vehicle, context={'request': request})\r\n        lastdata = adddict(serializer)\r\n        return Response({'brand': vehicle_serializer.data, 'parts': lastdata}, status=status.HTTP_200_OK)\r\n\r\n\r\ndef category_offer(data):\r\n    categorized_data = {}\r\n    for item in data:\r\n        parts_offer = item['parts_offer']\r\n        if parts_offer not in categorized_data:\r\n            categorized_data[parts_offer] = []\r\n        categorized_data[parts_offer].append(item)\r\n    return categorized_data\r\n\r\n\r\nclass allofferview(generics.ListAPIView):\r\n    serializer_class = OfferSerializer\r\n    queryset = Product.objects.all()\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.filter_queryset(self.get_queryset())\r\n        if not queryset.exists():\r\n            return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        categorized_data = category_offer(serializer.data)\r\n\r\n        return Response({'Offer': categorized_data}, status=status.HTTP_200_OK)\r\n\r\n\r\n# class allofferview(generics.ListAPIView):\r\n#     queryset = Product.objects.all()\r\n#     serializer_class = ProductSerializer\r\n#     def list(self, request, *args, **kwargs):\r\n#         offer=self.queryset.values_list('parts_offer', flat=True).distinct()\r\n#         return Response({'offer':offer}, status=status.HTTP_200_OK)\r\n\r\nclass WishlistCreateView(generics.ListCreateAPIView):\r\n    serializer_class = WishlistSerializer\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def get_queryset(self):\r\n        # Return the user's wishlist items\r\n        queryset = Wishlist.objects.all().filter(wishlist_name=self.request.user)\r\n        return queryset\r\n\r\n    def get_product(self):\r\n        product_id = self.kwargs.get('pk')\r\n        try:\r\n            return Product.objects.get(id=product_id)\r\n        except Product.DoesNotExist:\r\n            return None\r\n\r\n    def create(self, request, *args, **kwargs):\r\n        product = self.get_product()\r\n        print('p', product)\r\n        if not product:\r\n            return Response({\"error\": \"Product not found.\"}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n        # Check if the product is already in the user's wishlist\r\n        if Wishlist.objects.filter(wishlist_name=request.user, wishlist_product=product).exists():\r\n            return Response({\"error\": \"Product already exists in the wishlist.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        # Prepare the data for serialization\r\n        data = {\r\n            'wishlist_name': self.request.user,\r\n            'wishlist_product': product\r\n        }\r\n        print(data)\r\n        s = self.get_serializer(data=data)\r\n        # serializer.is_valid(raise_exception=True)\r\n        self.perform_create(s)\r\n\r\n        headers = self.get_success_headers(serializer)\r\n        return Response({'message': 'Wishlist created successfully'}, status=status.HTTP_201_CREATED, headers=headers)\r\n\r\n    def perform_create(self, serializer):\r\n        if serializer.is_valid(raise_exception=True):\r\n            serializer.save(wishlist_name=self.request.user, wishlist_product=self.get_product())\r\n\r\n\r\nclass WishallView(APIView):\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def get(self, request, *args, **kwargs):\r\n        # Filter the Wishlist items for the authenticated user\r\n        wishlists = Wishlist.objects.filter(wishlist_name=self.request.user)\r\n\r\n        # Initialize a list to hold serialized wishlist data\r\n\r\n        categorized_data = defaultdict(list)\r\n        # Serialize each wishlist item individually\r\n        for wishlist in wishlists:\r\n            # Serialize the wishlist item using WishlistSerializer\r\n            wishlist_data = WishallSerializer(wishlist, context={'request': request}).data\r\n            brand = wishlist_data['wishlist_name']\r\n            # wishlist_delete_all=wishlist_data['wishlistdelall']\r\n            product_info = {\r\n                'wishlist_product': f\"{wishlist_data['wishlist_product']['parts_brand']['brand_name']} {wishlist_data['wishlist_product']['parts_category']['category_name']} {wishlist_data['wishlist_product']['subcategory_name']}\",\r\n                'url': wishlist_data['wishlist_product']['url'],\r\n                'Wishlistdel': wishlist_data['wishlist_delete']\r\n            }\r\n\r\n            categorized_data[brand].append(product_info)\r\n            # Append serialized data to the list\r\n        categorized_data = dict(categorized_data)\r\n        if bool(categorized_data) is not False:\r\n            return Response(categorized_data, status=status.HTTP_200_OK)\r\n        else:\r\n            return Response({'Message': 'No Wishlist '}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\nclass DeleteWishlistItemView(APIView):\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def delete(self, request, *args, **kwargs):\r\n        wishid = kwargs.get('pk')\r\n        wishlistitem = get_object_or_404(Wishlist, pk=wishid, wishlist_name=self.request.user)\r\n        wishlistitem.delete()\r\n        return Response({'message': 'Item removed from wishlist successfully.'}, status=status.HTTP_204_NO_CONTENT)\r\n\r\n\r\nclass DeleteAllWishlistItemsView(APIView):\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def delete(self, request, *args, **kwargs):\r\n        Wishlist.objects.filter(wishlist_name=self.request.user).delete()\r\n        return Response({'message': 'All items removed from wishlist successfully.'}, status=status.HTTP_200_OK)\r\n\r\n\r\nclass BaseCartView(APIView):\r\n    COOKIE_NAME = 'cart_items'\r\n\r\n    def get_cart_items_from_cookie(self, request):\r\n        cart_items_json = request.COOKIES.get(self.COOKIE_NAME, '[]')\r\n        return json.loads(cart_items_json)\r\n\r\n    def save_cart_items_to_cookie(self, response, cart_items):\r\n        response.set_cookie(self.COOKIE_NAME, json.dumps(cart_items), httponly=True, secure=True, max_age=3600,\r\n                            samesite='Lax')\r\n\r\n    def set_cart_item_cookie(self, request, response, product_id, quantity):\r\n        cookie_name = f'cart_product_{product_id}'\r\n        existing_quantity = int(request.COOKIES.get(cookie_name, 0))\r\n        new_quantity = existing_quantity + quantity\r\n        response.set_cookie(cookie_name, new_quantity, httponly=True, max_age=3600, secure=True, samesite='Lax')\r\n\r\n    def delete_cart_item_cookie(self, response, product_id):\r\n        cookie_name = f'cart_product_{product_id}'\r\n        response.delete_cookie(cookie_name, path='/')\r\n        print(f'Deleting cookie: {cookie_name}')\r\n\r\n    def delete_all_cart_item_cookies(self, request, response):\r\n        cart_items = self.get_cart_items_from_cookie(request)\r\n        print(f'cart_items: {cart_items}')\r\n        for item in cart_items:\r\n            product_id = item['product_id']\r\n            self.delete_cart_item_cookie(response, product_id)\r\n        response.delete_cookie(self.COOKIE_NAME, path='/')\r\n        print(f'Deleting cookie: {self.COOKIE_NAME}')\r\n\r\n    def clear_cart(self, request, response):\r\n        self.delete_all_cart_item_cookies(request, response)\r\n\r\n\r\nclass ViewCartView(BaseCartView):\r\n\r\n    def get(self, request):\r\n        if request.user.is_authenticated:\r\n            cart_items = Cart.objects.filter(user=request.user)\r\n            serializer = CartSerializer(cart_items, many=True, context={'request': request})\r\n\r\n            if not serializer.data:\r\n                return Response({'message': 'No cart items found.'}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n            total_price = 0\r\n            savings = 0\r\n            print(total_price, savings)\r\n            for item in serializer.data:\r\n                product_id = item.get('product')\r\n                quantity = item.get('quantity', 0)\r\n                if product_id is None:\r\n                    continue\r\n                try:\r\n                    product = Product.objects.get(id=product_id)\r\n                except Product.DoesNotExist:\r\n                    continue\r\n\r\n                final_price = product.parts_price - (product.parts_price * product.parts_offer) / 100\r\n                carousel_saving = 0\r\n\r\n                if 'code' in item and item['code']:\r\n                    for code in item['code']:\r\n                        carousel = Carousel.objects.filter(carousel_code=code).first()\r\n                        if carousel:\r\n                            c_final_price = final_price - final_price * (carousel.carousel_offer / 100)\r\n                            savings_per_unit = final_price - c_final_price\r\n                            carousel_saving += savings_per_unit\r\n                            final_price = c_final_price\r\n                total_price += final_price * quantity\r\n                savings += carousel_saving * quantity\r\n            response = Response({'cart': serializer.data, 'total_price': total_price, 'save': savings},status=status.HTTP_200_OK)\r\n\r\n            for item in serializer.data:\r\n                self.set_cart_item_cookie(request, response, item[\"product\"], item[\"quantity\"])\r\n            return response\r\n        else:\r\n            cart_items = self.get_cart_items_from_cookie(request)\r\n            cart_data = []\r\n            total_price = 0\r\n            savings = 0\r\n            for item in cart_items:\r\n                product = Product.objects.get(id=item['product_id'])\r\n                final_price = product.parts_price - (product.parts_price * product.parts_offer) / 100\r\n                carousel_saving = 0\r\n                if 'code' in item:\r\n                    for code in item['code']:\r\n                        carousel = Carousel.objects.filter(carousel_code=code).first()\r\n                        if carousel:\r\n                            c_final_price = final_price - final_price * (carousel.carousel_offer / 100)\r\n                            carousel_saving += final_price - c_final_price\r\n                            final_price = c_final_price\r\n\r\n                total_price += final_price * item['quantity']\r\n                savings += carousel_saving * item['quantity']\r\n                cart_data.append({\r\n                    'product': product.id,\r\n                    'quantity': item['quantity'],\r\n                    'parts_name': CartSerializer().arrangename(product),\r\n                    'parts_price': product.parts_price,\r\n                    'parts_offer': product.parts_offer,\r\n                    'discount_amount': (product.parts_price * product.parts_offer) / 100,\r\n                    'final_price': product.parts_price - (product.parts_price * product.parts_offer) / 100,\r\n                    'main_image': product.main_image,\r\n                    'code': item.get('code', []),\r\n                })\r\n\r\n            if not cart_data:\r\n                return Response({'message': 'No cart items found.'}, status=status.HTTP_404_NOT_FOUND)\r\n            return Response({'cart': cart_data, 'total_price': total_price, 'save': savings}, status=status.HTTP_200_OK)\r\n\r\n    def post(self, request):\r\n        if request.user.is_authenticated:\r\n            carouselserializer = Carouselpostserializer(data=request.data)\r\n            user = request.user\r\n            if carouselserializer.is_valid():\r\n                c = Carousel.objects.get(carousel_code=carouselserializer.validated_data['carousel_code'])\r\n                print(c)\r\n                b = Brand.objects.get(brand_name=c.carousel_brand)\r\n                print(b)\r\n                ct = Category.objects.get(category_name=c.carousel_category)\r\n                print(ct)\r\n                p = Product.objects.filter(parts_brand=b, parts_category=ct)\r\n                print(p)\r\n                pro = None\r\n                for i in p:\r\n                    crt = Cart.objects.filter(user=user)\r\n                    print(crt)\r\n                    if crt:\r\n                        for j in crt:\r\n                            print(j.product)\r\n                            if i == j.product:\r\n                                j.code.add(c)\r\n                                return Response(data='Add successfully', status=status.HTTP_201_CREATED)\r\n                    else:\r\n                        return Response(data='Cart not found', status=status.HTTP_404_NOT_FOUND)\r\n            else:\r\n                return Response(carouselserializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n            return Response(data='Add successfully', status=status.HTTP_201_CREATED)\r\n        else:\r\n            carouselserializer = Carouselpostserializer(data=request.data)\r\n            if carouselserializer.is_valid():\r\n                c = Carousel.objects.get(carousel_code=carouselserializer.validated_data['carousel_code'])\r\n                print(f\"carousel:{c}\")\r\n                b = Brand.objects.get(brand_name=c.carousel_brand)\r\n                print(f\"Brand:{b}\")\r\n                ct = Category.objects.get(category_name=c.carousel_category)\r\n                print(f\"Category:{ct}\")\r\n                p = Product.objects.filter(parts_brand=b, parts_category=ct)\r\n                print(f\"part:{p}\")\r\n\r\n                cart_items = self.get_cart_items_from_cookie(request)\r\n                for i in p:\r\n                    for item in cart_items:\r\n                        if item['product_id'] == i.id:\r\n                            if 'code' in item and c.carousel_code in item['code']:\r\n                                return Response({'message': 'code is already applied'}, status=status.HTTP_200_OK)\r\n                            item.setdefault('code', []).append(c.carousel_code)\r\n                            cart_data = []\r\n                            for item in cart_items:\r\n                                product = Product.objects.get(id=item['product_id'])\r\n                                cart_data.append({\r\n                                    'product': product.id,\r\n                                    'quantity': item['quantity'],\r\n                                    'parts_name': CartSerializer().arrangename(product),\r\n                                    'parts_price': product.parts_price,\r\n                                    'parts_offer': product.parts_offer,\r\n                                    'discount_amount': (product.parts_price * product.parts_offer) / 100,\r\n                                    'final_price': product.parts_price - (\r\n                                            product.parts_price * product.parts_offer) / 100,\r\n                                    'main_image': product.main_image,\r\n                                    'code': item.get('code', []),\r\n                                })\r\n                            response = Response({'message': 'Added successfully', 'cart': cart_data},\r\n                                                status=status.HTTP_200_OK)\r\n                            self.save_cart_items_to_cookie(response, cart_items)\r\n                            return response\r\n                return Response({'message': 'Cart not found'}, status=status.HTTP_404_NOT_FOUND)\r\n            else:\r\n                return Response(carouselserializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\nclass CartItemsCreateView(BaseCartView):\r\n\r\n    def post(self, request, pk):\r\n        product = get_object_or_404(Product, pk=pk)\r\n        quantity = int(request.data.get('quantity', 1))\r\n\r\n        if request.user.is_authenticated:\r\n            cart_item, created = Cart.objects.get_or_create(\r\n                user=request.user,\r\n                product=product,\r\n                defaults={'quantity': quantity}\r\n            )\r\n            if not created:\r\n                cart_item.quantity += quantity\r\n                cart_item.save()\r\n            serializer = CartSerializer(cart_item, context={'request': request})\r\n            response = Response({'message': 'Product added/incremented in cart', 'cart': serializer.data},\r\n                                status=status.HTTP_200_OK)\r\n            self.set_cart_item_cookie(request, response, pk, quantity)\r\n            return response\r\n        else:\r\n            cart_items = self.get_cart_items_from_cookie(request)\r\n            for item in cart_items:\r\n                if item['product_id'] == pk:\r\n                    item['quantity'] += quantity\r\n                    break\r\n            else:\r\n                cart_items.append({'product_id': pk, 'quantity': quantity})\r\n\r\n            cart_data = []\r\n            for item in cart_items:\r\n                product = Product.objects.get(id=item['product_id'])\r\n                cart_data.append({\r\n                    'product': product.id,\r\n                    'quantity': item['quantity'],\r\n                    'parts_name': CartSerializer().arrangename(product),\r\n                    'parts_price': product.parts_price,\r\n                    'parts_offer': product.parts_offer,\r\n                    'discount_amount': (product.parts_price * product.parts_offer) / 100,\r\n                    'final_price': product.parts_price - (product.parts_price * product.parts_offer) / 100,\r\n                    'main_image': product.main_image,\r\n                })\r\n            response = Response({'message': 'Product added/incremented in cart', 'cart': cart_data},\r\n                                status=status.HTTP_200_OK)\r\n            self.save_cart_items_to_cookie(response, cart_items)\r\n            self.set_cart_item_cookie(request, response, pk, quantity)\r\n            return response\r\n\r\n    def patch(self, request, pk):\r\n        product = get_object_or_404(Product, pk=pk)\r\n        decrement_quantity = int(request.data.get('quantity', 1))\r\n\r\n        if request.user.is_authenticated:\r\n            cart_item = Cart.objects.filter(user=request.user, product=product).first()\r\n            if cart_item:\r\n                if cart_item.quantity > decrement_quantity:\r\n                    cart_item.quantity -= decrement_quantity\r\n                    cart_item.save()\r\n                    serializer = CartSerializer(cart_item, context={'request': request})\r\n                    response = Response({'message': 'Product decremented in cart', 'cart': serializer.data},\r\n                                        status=status.HTTP_200_OK)\r\n                    self.set_cart_item_cookie(request, response, pk, -decrement_quantity)\r\n                    return response\r\n                else:\r\n                    cart_item.delete()\r\n                    return Response({'message': 'Product removed from cart'}, status=status.HTTP_200_OK)\r\n            else:\r\n                return Response({'message': 'Product not in cart'}, status=status.HTTP_400_BAD_REQUEST)\r\n        else:\r\n            cart_items = self.get_cart_items_from_cookie(request)\r\n            for item in cart_items:\r\n                if item['product_id'] == pk:\r\n                    if item['quantity'] > decrement_quantity:\r\n                        item['quantity'] -= decrement_quantity\r\n                    else:\r\n                        cart_items.remove(item)\r\n                    break\r\n            else:\r\n                return Response({'message': 'Product not in cart'}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n            cart_data = []\r\n            for item in cart_items:\r\n                product = Product.objects.get(id=item['product_id'])\r\n                cart_data.append({\r\n                    'product': product.id,\r\n                    'quantity': item['quantity'],\r\n                    'parts_name': CartSerializer().arrangename(product),\r\n                    'parts_price': product.parts_price,\r\n                    'parts_offer': product.parts_offer,\r\n                    'discount_amount': (product.parts_price * product.parts_offer) / 100,\r\n                    'final_price': product.parts_price - (product.parts_price * product.parts_offer) / 100,\r\n                    'main_image': product.main_image,\r\n                })\r\n\r\n            response = Response({'message': 'Product decremented in cart', 'cart': cart_data},\r\n                                status=status.HTTP_200_OK)\r\n            self.save_cart_items_to_cookie(response, cart_items)\r\n            self.set_cart_item_cookie(request, response, pk, -decrement_quantity)\r\n            return response\r\n\r\n    def delete(self, request, pk):\r\n        product = get_object_or_404(Product, pk=pk)\r\n\r\n        if request.user.is_authenticated:\r\n            cart_item = Cart.objects.filter(user=request.user, product=product).first()\r\n            if cart_item:\r\n                cart_item.delete()\r\n                return Response({'message': 'Product removed from cart'}, status=status.HTTP_200_OK)\r\n            return Response({'error': 'Product not in cart'}, status=status.HTTP_400_BAD_REQUEST)\r\n        else:\r\n            cart_items = self.get_cart_items_from_cookie(request)\r\n            updated_cart_items = [item for item in cart_items if item['product_id'] != pk]\r\n            if len(updated_cart_items) == len(cart_items):\r\n                return Response({'error': 'Product not in cart'}, status=status.HTTP_400_BAD_REQUEST)\r\n            response = Response({'message': 'Product removed from cart'}, status=status.HTTP_200_OK)\r\n            self.save_cart_items_to_cookie(response, updated_cart_items)\r\n            self.delete_cart_item_cookie(response, pk)\r\n        return response\r\n\r\n\r\nclass RemoveFromCartView(BaseCartView):\r\n\r\n    def delete(self, request):\r\n        if request.user.is_authenticated:\r\n            Cart.objects.filter(user=request.user).delete()\r\n            response = Response({'message': 'Product removed from cart'}, status=status.HTTP_200_OK)\r\n            response.delete_cookie('cart')\r\n            return response\r\n\r\n        else:\r\n            cart_items = self.get_cart_items_from_cookie(request)\r\n            if not cart_items:\r\n                return Response({'error': 'Cart is already empty'}, status=status.HTTP_400_BAD_REQUEST)\r\n            response = Response({'message': 'Product removed from cart'}, status=status.HTTP_200_OK)\r\n            self.clear_cart(request, response)\r\n            return response\r\n\r\n\r\nclass Carouselallview(generics.ListAPIView):\r\n    serializer_class = Carouselserilizers\r\n    queryset = Carousel.objects.all()\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.filter_queryset(self.get_queryset())\r\n        if not queryset.exists():\r\n            return Response({'details': 'Carousel Not Found'}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        return Response({'Carousel': serializer.data}, status=status.HTTP_200_OK)\r\n\r\n\r\nclass Carouseloneview(generics.ListAPIView):\r\n    serializer_class = ProductSerializer\r\n\r\n    def get_queryset(self):\r\n        carousel_id = self.kwargs.get('pk')\r\n        c = Carousel.objects.get(id=carousel_id)\r\n        cat = c.carousel_category\r\n        ban = c.carousel_brand\r\n        queryset = Product.objects.all().filter(parts_category=cat, parts_brand=ban)\r\n        return queryset\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.get_queryset()\r\n        carousel_id = self.kwargs.get('pk')\r\n        c = Carousel.objects.get(id=carousel_id)\r\n        if not queryset.exists():\r\n            return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)\r\n        serializer = self.get_serializer(queryset, many=True, context={'request': request})\r\n        carousel_serilizer = Carouselserilizers(c, context={'request': request})\r\n        lastdata = adddict(serializer)\r\n        return Response({'Carousel': carousel_serilizer.data, 'parts': lastdata}, status=status.HTTP_200_OK)\r\n\r\n\r\nclass BuyNowAPIView(APIView):\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def post(self, request, pk, *args, **kwargs):\r\n        product = get_object_or_404(Product, pk=pk)\r\n        serializer = Buynowserilizers(data=request.data, context={'request': request})\r\n        if serializer.is_valid():\r\n            result = serializer.save()\r\n            response_data = {\r\n                \"message\": \"Addresses saved successfully.\",\r\n                \"billing_address\": Billaddressserializer(result[\"billing_address\"]).data,\r\n                \"shipping_address\": Shippingaddressserializer(result[\"shipping_address\"]).data if result[\r\n                    \"shipping_address\"] else None\r\n            }\r\n            return Response(response_data, status=status.HTTP_200_OK)\r\n        else:\r\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\nclass OrderSummaryAPIView(BaseCartView):\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def get(self, request):\r\n        user = request.user\r\n        user_profile = Profile.objects.filter(user=user).first()\r\n        if not user_profile:\r\n            return Response({\"detail\": \"Profile not found.\"}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n        preferred_billing_address = user_profile.preferred_billing_address\r\n        preferred_shipping_address = user_profile.preferred_shipping_address\r\n\r\n        products_data = request.query_params.getlist('products')\r\n        order_items = []\r\n        grand_total = 0\r\n\r\n        # Debugging print to check the cookies and query parameters\r\n        print(f\"Request COOKIES: {request.COOKIES}\")\r\n        print(f\"Request query params: {products_data}\")\r\n\r\n        def parse_cookie_data():\r\n            items = []\r\n            for key, value in request.COOKIES.items():\r\n                if key.startswith('cart_product_'):\r\n                    try:\r\n                        product_id = int(key.split('_')[2])\r\n                        quantity = int(value)\r\n                        items.append({\"product_id\": product_id, \"quantity\": quantity})\r\n                    except (IndexError, ValueError):\r\n                        continue\r\n            return items\r\n\r\n        def parse_url_parameter_data(products_data):\r\n            items = []\r\n            for product_data in products_data:\r\n                try:\r\n                    product_id, quantity = map(int, product_data.split(','))\r\n                    items.append({\"product_id\": product_id, \"quantity\": quantity})\r\n                except ValueError:\r\n                    continue\r\n            return items\r\n\r\n        order_items.extend(parse_cookie_data())\r\n        if products_data:\r\n            order_items.extend(parse_url_parameter_data(products_data))\r\n\r\n        # Debugging print to check parsed order items\r\n        print(f\"Order items after parsing: {order_items}\")\r\n\r\n        if not order_items:\r\n            return Response({\"detail\": \"No products.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        detailed_order_items = []\r\n\r\n        for item in order_items:\r\n            try:\r\n                product = Product.objects.get(id=item[\"product_id\"])\r\n            except Product.DoesNotExist:\r\n                continue\r\n\r\n            product_serializer = ProductSerializer(product, context={'request': request})\r\n            product_data = product_serializer.data\r\n            total = product_data['final_price'] * item[\"quantity\"]\r\n            grand_total += total\r\n\r\n            detailed_order_items.append({\r\n                \"product_id\": product_data['id'],\r\n                \"product_name\": product_data['parts_name'],\r\n                \"product_category\": product_data['parts_category'],\r\n                \"product_brand\": product_data['parts_brand'],\r\n                \"product_price\": product_data['final_price'],\r\n                \"product_image\": product_data['main_image'],\r\n                \"quantity\": item[\"quantity\"],\r\n                'code': item.get('code', []),\r\n                \"total\": total,\r\n            })\r\n\r\n        response = Response(status=status.HTTP_200_OK)\r\n        for item in detailed_order_items:\r\n            self.set_cart_item_cookie(request, response, item[\"product_id\"], item[\"quantity\"])\r\n\r\n        response.data = {\r\n            \"preferred_billing_address\": Billaddressserializer(\r\n                preferred_billing_address).data if preferred_billing_address else None,\r\n            \"preferred_shipping_address\": Shippingaddressserializer(\r\n                preferred_shipping_address).data if preferred_shipping_address else None,\r\n            \"order_items\": detailed_order_items,\r\n            \"grand_total\": grand_total,\r\n        }\r\n        return response\r\n\r\n\r\nclass OrderAPIView(BaseCartView):\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def post(self, request):\r\n        user = request.user\r\n        user_profile = Profile.objects.filter(user=user).first()\r\n        if not user_profile:\r\n            return Response({\"detail\": \"Profile not found.\"}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n        order_items = []\r\n        for key, value in request.COOKIES.items():\r\n            if key.startswith('product_') or key.startswith('cart_product_'):\r\n                split_index = 2 if key.startswith('cart_product_') else 1\r\n                product_id = int(key.split('_')[split_index])\r\n                quantity = int(value)\r\n                order_items.append({\"product_id\": product_id, \"quantity\": quantity})\r\n\r\n        if not order_items:\r\n            return Response({\"detail\": \"No order items.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        orders = []\r\n        for item in order_items:\r\n            product_id = item['product_id']\r\n            quantity = item['quantity']\r\n\r\n            product = Product.objects.get(id=product_id)\r\n            order = Order.objects.create(\r\n                user=user,\r\n                product=product,\r\n                quantity=quantity,\r\n                billing_address=user_profile.preferred_billing_address,\r\n                shipping_address=user_profile.preferred_shipping_address,\r\n            )\r\n\r\n            product_order_count, created = ProductOrderCount.objects.get_or_create(product=product)\r\n            product_order_count.order_count += quantity\r\n            product_order_count.save()\r\n            orders.append(order)\r\n\r\n        if not orders:\r\n            return Response({\"detail\": \"No valid orders could be created.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        response_data = {\r\n            \"message\": \"Thank you for your order!\",\r\n            \"order_details\": [OrderSerializer(order).data for order in orders],\r\n        }\r\n        order_details = [\r\n            {\r\n                'order_id': order.order_id,\r\n                'product_name': order.product,\r\n                'quantity': order.quantity,\r\n                'order_date': order.order_date,\r\n                'billing_address': order.billing_address,\r\n                'shipping_address': order.shipping_address,\r\n            } for order in orders\r\n        ]\r\n        data = {\r\n            'order_details': order_details,\r\n            'to_email': user.email,\r\n        }\r\n        send_confirmation_email(data)\r\n\r\n        if request.user.is_authenticated:\r\n            Cart.objects.filter(user=user).delete()\r\n\r\n        response = Response(response_data, status=status.HTTP_201_CREATED)\r\n\r\n        for item in order_items:\r\n            self.delete_cart_item_cookie(response, item[\"product_id\"])\r\n\r\n        self.delete_all_cart_item_cookies(request, response)\r\n\r\n        return response\r\n\r\n\r\nclass BestSellingView(generics.ListAPIView):\r\n    serializer_class = Bestsellingserializer\r\n    pagination_class = CustomPagination\r\n\r\n    def get_queryset(self):\r\n        threshold = 15\r\n        return ProductOrderCount.objects.filter(order_count__gte=threshold).order_by('-order_count')\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        queryset = self.get_queryset()\r\n        serializer = self.get_serializer(queryset, many=True, context={'request': request})\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n        # page = self.paginate_queryset(self.get_queryset())\r\n        # if page is not None:\r\n        #     serializer = self.get_serializer(page, many=True, context={'request': request})\r\n        #     return self.get_paginated_response(serializer.data)\r\n        # serializer = self.get_serializer(queryset, many=True, context={'request': request})\r\n        # return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\nclass MyOrderView(APIView):\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def get(self, request, order_id=None):\r\n        user = request.user\r\n\r\n        def get_order_details(order):\r\n            product = order.product\r\n            product_data = ProductSerializer(product, context={'request': request}).data\r\n            order_details = {\r\n                'order_id': order.order_id,\r\n                'order_date': order.order_date,\r\n                \"product_name\": product_data['parts_name'],\r\n                \"part_no\": product_data['parts_no'],\r\n                \"product_price\": product_data['final_price'],\r\n                \"product_image\": product_data['main_image'],\r\n                'quantity': order.quantity,\r\n            }\r\n            return order_details\r\n\r\n        if order_id:\r\n            order = get_object_or_404(Order, user=user, order_id=order_id)\r\n            order_details = get_order_details(order)\r\n            return Response(order_details, status=status.HTTP_404_NOT_FOUND)\r\n        orders = Order.objects.filter(user=user)\r\n        if not orders:\r\n            return Response({\"detail\": \"No orders found.\"}, status=status.HTTP_404_NOT_FOUND)\r\n        all_order_details = [get_order_details(order) for order in orders]\r\n        return Response(all_order_details, status=status.HTTP_200_OK)\r\n\r\n    def delete(self, request, order_id=None):\r\n        if not order_id:\r\n            return Response({\"detail\": \"Order ID required\"}, status=status.HTTP_400_BAD_REQUEST)\r\n        user = request.user\r\n        order = get_object_or_404(Order, user=user, order_id=order_id)\r\n        product_order_count = get_object_or_404(ProductOrderCount, product=order.product)\r\n        product_order_count.order_count -= order.quantity\r\n        if product_order_count.order_count <= 0:\r\n            product_order_count.order_count = 0\r\n        product_order_count.save()\r\n\r\n        order.delete()\r\n        return Response({\"detail\": \"Order deleted.\"}, status=status.HTTP_204_NO_CONTENT)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partcraft/parts/views.py b/partcraft/parts/views.py
--- a/partcraft/parts/views.py	(revision b1b70f1ffde71730cb20517e2b95f3e89c19c667)
+++ b/partcraft/parts/views.py	(date 1721710401062)
@@ -1,14 +1,14 @@
 import json
+
 from django.db.migrations import serializer
 from django.shortcuts import render
 from django_filters.rest_framework import DjangoFilterBackend
-from elasticsearch import NotFoundError
 from rest_framework.response import Response
 from rest_framework.views import APIView
-from rest_framework.permissions import IsAdminUser, IsAuthenticatedOrReadOnly, IsAuthenticated
+from rest_framework.permissions import IsAdminUser,IsAuthenticatedOrReadOnly,IsAuthenticated
 from rest_framework import status, generics
 from rest_framework.exceptions import NotFound
-from rest_framework.filters import SearchFilter, OrderingFilter
+from rest_framework.filters import  SearchFilter,OrderingFilter
 from rest_framework.pagination import PageNumberPagination
 from rest_framework.decorators import api_view
 from django.db.models import F, CharField, Value
@@ -18,39 +18,38 @@
 from .models import *
 from .serializers import *
 from collections import defaultdict
-from .filter import OfferfilterSet
+from .filter import *
 from account.emails import send_confirmation_email
 import base64
-from django_elasticsearch_dsl_drf.viewsets import DocumentViewSet
-from django_elasticsearch_dsl_drf.filter_backends import FilteringFilterBackend, CompoundSearchFilterBackend
-from .documents import ProductDocument
+
 
 def adddict(serializer):
+
     last_data = []
     for i in serializer.data:
         data = {}
         data['id'] = i['id']
         data['parts_type'] = i['parts_type']
-        data['main_image'] = i['main_image']
-        data['brand_image'] = i['parts_brand']['brand_image']
+        data['main_image']=i['main_image']
+        data['brand_image']=i['parts_brand']['brand_image']
         d = (f"{i['parts_brand']['brand_name']} "
-             f"{i['parts_category']['category_name']} "
-             f'{i["subcategory_name"]}'
-             f"{i['parts_voltage']} "
-             f"{i['parts_litre']}L ")
-        data['parts__Name'] = d.replace('NoneL', '').strip()
-        data['parts_no'] = i['parts_no']
-        data['parts_offer'] = i['parts_offer']
-        data['parts_price'] = i['parts_price']
-        dis = i['parts_price'] * (i['parts_offer'] / 100)
-        data['final_price'] = i['parts_price'] - dis
-        data['product_full_detail'] = i['url']
+                                   f"{i['parts_category']['category_name']} "
+                                   f'{i["subcategory_name"]}' 
+                                   f"{i['parts_voltage']} "
+                                   f"{i['parts_litre']}L ")
+        data['parts__Name']=d.replace('NoneL','').strip()
+        data['parts_no']=i['parts_no']
+        data['parts_offer']=i['parts_offer']
+        data['parts_price']=i['parts_price']
+        dis=i['parts_price']*(i['parts_offer']/100)
+        data['final_price']=i['parts_price']-dis
+        data['product_full_detail']=i['url']
         data['is_in_wishlist'] = i['is_in_wishlist']
         if i['is_in_wishlist'] is False:
-            data['wishlist'] = i['wishlist']
+            data['wishlist']=i['wishlist']
             data['is_in_wishlist'] = i['is_in_wishlist']
         elif i['is_in_wishlist'] is True:
-            data['is_in_wishlist'] = i['is_in_wishlist']
+            data['is_in_wishlist']=i['is_in_wishlist']
 
         last_data.append(data)
     return last_data
@@ -60,11 +59,8 @@
     page_size = 2
     page_size_query_param = 'size'
     max_page_size = 10
-
-
 # def offerdata(queryset):
 #     return queryset.values_list('parts_offer', flat=True).distinct()
-
 class partslistview(generics.ListAPIView):
     # queryset = Product.objects.all()
     # print(queryset)
@@ -100,92 +96,17 @@
             lastdata = adddict(serializer)
             return self.get_paginated_response(lastdata)
         serializer = self.get_serializer(queryset, many=True, context={'request': request})
-        lastdata = adddict(serializer)
+        lastdata=adddict(serializer)
         # offer=offerdata(queryset)
         return Response(lastdata, status=status.HTTP_200_OK)
 
-
-# localhost:9200/product/_search?pretty=
-# localhost:9200/product/
-# localhost:9200/product/_mapping?pretty
-class partslistsDocumentView(DocumentViewSet):
-    document = ProductDocument
-    serializer_class = ProductoneSerializer
-    filter_backends = [FilteringFilterBackend, CompoundSearchFilterBackend]
-    query_backends = [CompoundSearchFilterBackend]
-    filter_fields = {
-        'parts_brand': 'parts_brand',
-        'parts_category': 'parts_category',
-        'subcategory_name': 'subcategory_name',
-        'parts_no': 'parts_no',
-        'parts_fits': 'parts_fits',
-        'parts_type': 'parts_type',
-    }
-    search_fields = ['parts_brand', 'parts_category', 'subcategory_name', 'parts_no', 'parts_fits', 'parts_type']
-    multi_match_search_fields = ['parts_brand', 'parts_category', 'subcategory_name', 'parts_no', 'parts_fits', 'parts_type']
-    pagination_class = CustomPagination
-
-    def get_queryset(self):
-        search_query = self.request.query_params.get('search', '').strip()
-        min_price = self.request.query_params.get('min_price')
-        max_price = self.request.query_params.get('max_price')
-        min_offer = self.request.query_params.get('min_offer')
-        max_offer = self.request.query_params.get('max_offer')
-
-        search = self.document.search()
-        print(search.to_dict())
-        if search_query:
-            search = search.query('bool', should=[
-            {'match': {'parts_brand': search_query}},
-            {'match': {'parts_category': search_query}},
-            {'match': {'subcategory_name': search_query}},
-            {'match': {'parts_no': search_query}},
-            {'match': {'parts_fits': search_query}},
-            {'match': {'parts_type': search_query}}
-        ])
-
-        if min_offer or max_offer:
-            offer_filter = {}
-            if min_offer:
-                offer_filter['gte'] = int(min_offer)
-            if max_offer:
-                offer_filter['lte'] = int(max_offer)
-            search = search.filter('range', parts_offer=offer_filter)
-
-        if min_price or max_price:
-            price_filter = {}
-            if min_price:
-                price_filter['gte'] = float(min_price)
-            if max_price:
-                price_filter['lte'] = float(max_price)
-            search = search.filter('range', final_price=price_filter)
-
-        return search
-
-    def list(self, request, *args, **kwargs):
-        queryset = self.filter_queryset(self.get_queryset())
-        response = queryset.execute()
-        print(response)
-        if not response.hits:
-            return Response({"detail": "No Product found matching the criteria."}, status=status.HTTP_404_NOT_FOUND)
-        hit_ids = [hit.meta.id for hit in response.hits]
-        queryset = Product.objects.filter(id__in=hit_ids)
-        page = self.paginate_queryset(queryset)
-        if page is not None:
-            serializer = self.get_serializer(page, many=True, context={'request': request})
-            return self.get_paginated_response(serializer.data)
-        serializer = self.get_serializer(queryset, many=True, context={'request': request})
-        return Response(serializer.data, status=status.HTTP_200_OK)
-
 class partsonedetail(generics.RetrieveAPIView):
     serializer_class = ProductSerializer
     permission_classes = [IsAuthenticatedOrReadOnly]
-
     def get_queryset(self):
-        product_id = self.kwargs.get('pk')
-        queryset = Product.objects.filter(id=product_id)
+        product_id=self.kwargs.get('pk')
+        queryset=Product.objects.filter(id=product_id)
         return queryset
-
     def get(self, request, *args, **kwargs):
         queryset = self.get_queryset()
         if not queryset.exists():
@@ -195,12 +116,12 @@
         serializer = self.get_serializer(product)
         data = serializer.data
 
+
         if data.get('is_in_wishlist'):
             data.pop('wishlist', None)
 
         return Response(data, status=status.HTTP_200_OK)
 
-
 class categorylistview(generics.ListAPIView):
     queryset = Category.objects.all()
     serializer_class = CategorySerializer
@@ -213,14 +134,12 @@
         print(serializer)
         return Response(serializer.data, status=status.HTTP_200_OK)
 
-
 class categoryonedetail(generics.ListAPIView):
     serializer_class = ProductSerializer
-
     def get_queryset(self):
-        category_id = self.kwargs.get('pk')
-        cat = Category.objects.get(id=category_id)
-        quaryset = Product.objects.all().filter(parts_category_id=cat.id)
+        category_id=self.kwargs.get('pk')
+        cat=Category.objects.get(id=category_id)
+        quaryset=Product.objects.all().filter(parts_category_id=cat.id)
         return quaryset
 
     def list(self, request, *args, **kwargs):
@@ -228,23 +147,23 @@
         category_id = self.kwargs.get('pk')
         cat = Category.objects.get(id=category_id)
         if not queryset.exists():
-            return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)
+            return Response({'details':'Product Not Found'},status=status.HTTP_404_NOT_FOUND)
         serializer = self.get_serializer(queryset, many=True)
         category_serializer = CategorySerializer(cat, context={'request': request})
         lastdata = adddict(serializer)
-        return Response({'brand': category_serializer.data, 'parts': lastdata}, status=status.HTTP_200_OK)
+        return Response({'brand':category_serializer.data,'parts':lastdata}, status=status.HTTP_200_OK)
 
 
 class brandlistview(generics.ListAPIView):
-    queryset = Brand.objects.all()
+    queryset=Brand.objects.all()
     serializer_class = BrandSerializer
 
-    def list(self, request, *args, **kwargs):
-        queryset = self.filter_queryset(self.get_queryset())
+    def list(self,request,*args, **kwargs):
+        queryset=self.filter_queryset(self.get_queryset())
         if not queryset.exists():
             raise NotFound(detail="No Brand found matching the criteria.")
-        serializer = self.get_serializer(queryset, many=True)
-        return Response(serializer.data, status=status.HTTP_200_OK)
+        serializer =self.get_serializer(queryset, many=True)
+        return Response(serializer.data,status=status.HTTP_200_OK)
 
 
 class brandonedetail(generics.ListAPIView):
@@ -258,26 +177,26 @@
 
     def list(self, request, *args, **kwargs):
         queryset = self.get_queryset()
-        brand_id = self.kwargs.get('pk')
+        brand_id=self.kwargs.get('pk')
         brand = Brand.objects.get(id=brand_id)
         if not queryset.exists():
             return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)
         serializer = self.get_serializer(queryset, many=True)
-        brand_serializer = BrandSerializer(brand, context={'request': request})
+        brand_serializer = BrandSerializer(brand,context={'request':request})
         lastdata = adddict(serializer)
-        return Response({'brand': brand_serializer.data, 'parts': lastdata}, status=status.HTTP_200_OK)
+        return Response({'brand':brand_serializer.data,'parts':lastdata}, status=status.HTTP_200_OK)
 
 
 class vehiclelistview(generics.ListAPIView):
     queryset = Vehicle.objects.all()
-    serializer_class = VehicleSerializer
+    serializer_class =  VehicleSerializer
 
     def list(self, request, *args, **kwargs):
-        queryset = self.filter_queryset(self.get_queryset())
+        queryset=self.filter_queryset(self.get_queryset())
         if not queryset.exists():
             raise NotFound(detail="No Vehicle found matching the criteria.")
-        serializer = self.get_serializer(queryset, many=True)
-        return Response(serializer.data, status=status.HTTP_200_OK)
+        serializer=self.get_serializer(queryset,many=True)
+        return Response(serializer.data,status=status.HTTP_200_OK)
 
 
 @api_view(['POST', 'GET'])
@@ -294,7 +213,7 @@
                 )
                 this_part = Product.objects.filter(this_parts_fits=vehicle)
                 print(this_part)
-                productserializer = ProductSerializer(this_part, context={'request': request}, many=True)
+                productserializer = ProductSerializer(this_part,context={'request':request}, many=True)
                 lastdata = adddict(productserializer)
                 return Response({
                     'vehicle': vehicleserializer.data,
@@ -307,10 +226,11 @@
 
     elif request.method == 'GET':
         queryset = Vehicle.objects.all()
-        serializer = VehicleSerializer(queryset, many=True, context={'request': request})
+        serializer = VehicleSerializer(queryset, many=True,context={'request':request})
         return Response(serializer.data, status=status.HTTP_200_OK)
 
 
+
 class vehicleoneview(generics.ListAPIView):
     serializer_class = ProductSerializer
 
@@ -326,12 +246,11 @@
         vehicle = Vehicle.objects.get(id=vehicle_id)
         if not queryset.exists():
             return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)
-        serializer = self.get_serializer(queryset, many=True, context={'request': request})
+        serializer = self.get_serializer(queryset, many=True,context={'request': request})
         vehicle_serializer = VehicleSerializer(vehicle, context={'request': request})
         lastdata = adddict(serializer)
         return Response({'brand': vehicle_serializer.data, 'parts': lastdata}, status=status.HTTP_200_OK)
 
-
 def category_offer(data):
     categorized_data = {}
     for item in data:
@@ -354,9 +273,8 @@
         serializer = self.get_serializer(queryset, many=True)
         categorized_data = category_offer(serializer.data)
 
-        return Response({'Offer': categorized_data}, status=status.HTTP_200_OK)
+        return Response({'Offer':categorized_data}, status=status.HTTP_200_OK)
 
-
 # class allofferview(generics.ListAPIView):
 #     queryset = Product.objects.all()
 #     serializer_class = ProductSerializer
@@ -370,7 +288,7 @@
 
     def get_queryset(self):
         # Return the user's wishlist items
-        queryset = Wishlist.objects.all().filter(wishlist_name=self.request.user)
+        queryset=Wishlist.objects.all().filter(wishlist_name=self.request.user)
         return queryset
 
     def get_product(self):
@@ -382,7 +300,7 @@
 
     def create(self, request, *args, **kwargs):
         product = self.get_product()
-        print('p', product)
+        print('p',product)
         if not product:
             return Response({"error": "Product not found."}, status=status.HTTP_404_NOT_FOUND)
 
@@ -401,13 +319,11 @@
         self.perform_create(s)
 
         headers = self.get_success_headers(serializer)
-        return Response({'message': 'Wishlist created successfully'}, status=status.HTTP_201_CREATED, headers=headers)
+        return Response({ 'message': 'Wishlist created successfully'}, status=status.HTTP_201_CREATED, headers=headers)
 
     def perform_create(self, serializer):
         if serializer.is_valid(raise_exception=True):
             serializer.save(wishlist_name=self.request.user, wishlist_product=self.get_product())
-
-
 class WishallView(APIView):
     permission_classes = [IsAuthenticated]
 
@@ -422,12 +338,12 @@
         for wishlist in wishlists:
             # Serialize the wishlist item using WishlistSerializer
             wishlist_data = WishallSerializer(wishlist, context={'request': request}).data
-            brand = wishlist_data['wishlist_name']
+            brand =wishlist_data['wishlist_name']
             # wishlist_delete_all=wishlist_data['wishlistdelall']
             product_info = {
                 'wishlist_product': f"{wishlist_data['wishlist_product']['parts_brand']['brand_name']} {wishlist_data['wishlist_product']['parts_category']['category_name']} {wishlist_data['wishlist_product']['subcategory_name']}",
-                'url': wishlist_data['wishlist_product']['url'],
-                'Wishlistdel': wishlist_data['wishlist_delete']
+                'url' : wishlist_data['wishlist_product']['url'],
+                'Wishlistdel':wishlist_data['wishlist_delete']
             }
 
             categorized_data[brand].append(product_info)
@@ -438,7 +354,6 @@
         else:
             return Response({'Message': 'No Wishlist '}, status=status.HTTP_400_BAD_REQUEST)
 
-
 class DeleteWishlistItemView(APIView):
     permission_classes = [IsAuthenticated]
 
@@ -448,7 +363,6 @@
         wishlistitem.delete()
         return Response({'message': 'Item removed from wishlist successfully.'}, status=status.HTTP_204_NO_CONTENT)
 
-
 class DeleteAllWishlistItemsView(APIView):
     permission_classes = [IsAuthenticated]
 
@@ -456,41 +370,39 @@
         Wishlist.objects.filter(wishlist_name=self.request.user).delete()
         return Response({'message': 'All items removed from wishlist successfully.'}, status=status.HTTP_200_OK)
 
-
 class BaseCartView(APIView):
-    COOKIE_NAME = 'cart_items'
+    COOKIE_NAME = 'ci'
 
     def get_cart_items_from_cookie(self, request):
         cart_items_json = request.COOKIES.get(self.COOKIE_NAME, '[]')
         return json.loads(cart_items_json)
 
     def save_cart_items_to_cookie(self, response, cart_items):
-        response.set_cookie(self.COOKIE_NAME, json.dumps(cart_items), httponly=True, secure=True, max_age=3600,
-                            samesite='Lax')
+        response.set_cookie(self.COOKIE_NAME, json.dumps(cart_items), httponly=True, secure=True, max_age=3600, samesite='Lax')
 
     def set_cart_item_cookie(self, request, response, product_id, quantity):
-        cookie_name = f'cart_product_{product_id}'
+        cookie_name = f'cp_{product_id}'
         existing_quantity = int(request.COOKIES.get(cookie_name, 0))
         new_quantity = existing_quantity + quantity
         response.set_cookie(cookie_name, new_quantity, httponly=True, max_age=3600, secure=True, samesite='Lax')
 
     def delete_cart_item_cookie(self, response, product_id):
-        cookie_name = f'cart_product_{product_id}'
-        response.delete_cookie(cookie_name, path='/')
+        cookie_name = f'cp_{product_id}'
+        response.delete_cookie(cookie_name)
         print(f'Deleting cookie: {cookie_name}')
 
     def delete_all_cart_item_cookies(self, request, response):
         cart_items = self.get_cart_items_from_cookie(request)
-        print(f'cart_items: {cart_items}')
         for item in cart_items:
             product_id = item['product_id']
             self.delete_cart_item_cookie(response, product_id)
-        response.delete_cookie(self.COOKIE_NAME, path='/')
+        response.delete_cookie(self.COOKIE_NAME)
         print(f'Deleting cookie: {self.COOKIE_NAME}')
 
-    def clear_cart(self, request, response):
+    def clear_cart(self, request):
+        response = Response({'message': 'Cart cleared'})
         self.delete_all_cart_item_cookies(request, response)
-
+        return response
 
 class ViewCartView(BaseCartView):
 
@@ -498,61 +410,20 @@
         if request.user.is_authenticated:
             cart_items = Cart.objects.filter(user=request.user)
             serializer = CartSerializer(cart_items, many=True, context={'request': request})
-
             if not serializer.data:
                 return Response({'message': 'No cart items found.'}, status=status.HTTP_404_NOT_FOUND)
-
-            total_price = 0
-            savings = 0
-            print(total_price, savings)
-            for item in serializer.data:
-                product_id = item.get('product')
-                quantity = item.get('quantity', 0)
-                if product_id is None:
-                    continue
-                try:
-                    product = Product.objects.get(id=product_id)
-                except Product.DoesNotExist:
-                    continue
-
-                final_price = product.parts_price - (product.parts_price * product.parts_offer) / 100
-                carousel_saving = 0
-
-                if 'code' in item and item['code']:
-                    for code in item['code']:
-                        carousel = Carousel.objects.filter(carousel_code=code).first()
-                        if carousel:
-                            c_final_price = final_price - final_price * (carousel.carousel_offer / 100)
-                            savings_per_unit = final_price - c_final_price
-                            carousel_saving += savings_per_unit
-                            final_price = c_final_price
-                total_price += final_price * quantity
-                savings += carousel_saving * quantity
-            response = Response({'cart': serializer.data, 'total_price': total_price, 'save': savings},status=status.HTTP_200_OK)
-
-            for item in serializer.data:
-                self.set_cart_item_cookie(request, response, item["product"], item["quantity"])
-            return response
+            else:
+                response = Response({'cart': serializer.data}, status=status.HTTP_200_OK)
+                for item in serializer.data:
+                    self.set_cart_item_cookie(request, response, item["product"], item["quantity"])
+                return response
         else:
             cart_items = self.get_cart_items_from_cookie(request)
             cart_data = []
-            total_price = 0
-            savings = 0
             for item in cart_items:
                 product = Product.objects.get(id=item['product_id'])
-                final_price = product.parts_price - (product.parts_price * product.parts_offer) / 100
-                carousel_saving = 0
-                if 'code' in item:
-                    for code in item['code']:
-                        carousel = Carousel.objects.filter(carousel_code=code).first()
-                        if carousel:
-                            c_final_price = final_price - final_price * (carousel.carousel_offer / 100)
-                            carousel_saving += final_price - c_final_price
-                            final_price = c_final_price
-
-                total_price += final_price * item['quantity']
-                savings += carousel_saving * item['quantity']
                 cart_data.append({
+                    'user': None,
                     'product': product.id,
                     'quantity': item['quantity'],
                     'parts_name': CartSerializer().arrangename(product),
@@ -561,12 +432,11 @@
                     'discount_amount': (product.parts_price * product.parts_offer) / 100,
                     'final_price': product.parts_price - (product.parts_price * product.parts_offer) / 100,
                     'main_image': product.main_image,
-                    'code': item.get('code', []),
                 })
 
             if not cart_data:
                 return Response({'message': 'No cart items found.'}, status=status.HTTP_404_NOT_FOUND)
-            return Response({'cart': cart_data, 'total_price': total_price, 'save': savings}, status=status.HTTP_200_OK)
+            return Response({'cart': cart_data}, status=status.HTTP_200_OK)
 
     def post(self, request):
         if request.user.is_authenticated:
@@ -607,15 +477,13 @@
                 print(f"Category:{ct}")
                 p = Product.objects.filter(parts_brand=b, parts_category=ct)
                 print(f"part:{p}")
-
                 cart_items = self.get_cart_items_from_cookie(request)
+
                 for i in p:
                     for item in cart_items:
                         if item['product_id'] == i.id:
-                            if 'code' in item and c.carousel_code in item['code']:
-                                return Response({'message': 'code is already applied'}, status=status.HTTP_200_OK)
                             item.setdefault('code', []).append(c.carousel_code)
-                            cart_data = []
+                            cart_data=[]
                             for item in cart_items:
                                 product = Product.objects.get(id=item['product_id'])
                                 cart_data.append({
@@ -626,19 +494,17 @@
                                     'parts_offer': product.parts_offer,
                                     'discount_amount': (product.parts_price * product.parts_offer) / 100,
                                     'final_price': product.parts_price - (
-                                            product.parts_price * product.parts_offer) / 100,
+                                                product.parts_price * product.parts_offer) / 100,
                                     'main_image': product.main_image,
-                                    'code': item.get('code', []),
+                                    'code': item['code'],
                                 })
-                            response = Response({'message': 'Added successfully', 'cart': cart_data},
-                                                status=status.HTTP_200_OK)
+                            response = Response({'message': 'Added successfully', 'cart': cart_data}, status=status.HTTP_200_OK)
                             self.save_cart_items_to_cookie(response, cart_items)
                             return response
                 return Response({'message': 'Cart not found'}, status=status.HTTP_404_NOT_FOUND)
             else:
                 return Response(carouselserializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
-
 class CartItemsCreateView(BaseCartView):
 
     def post(self, request, pk):
@@ -655,8 +521,7 @@
                 cart_item.quantity += quantity
                 cart_item.save()
             serializer = CartSerializer(cart_item, context={'request': request})
-            response = Response({'message': 'Product added/incremented in cart', 'cart': serializer.data},
-                                status=status.HTTP_200_OK)
+            response = Response({'message': 'Product added/incremented in cart', 'cart': serializer.data}, status=status.HTTP_200_OK)
             self.set_cart_item_cookie(request, response, pk, quantity)
             return response
         else:
@@ -681,8 +546,7 @@
                     'final_price': product.parts_price - (product.parts_price * product.parts_offer) / 100,
                     'main_image': product.main_image,
                 })
-            response = Response({'message': 'Product added/incremented in cart', 'cart': cart_data},
-                                status=status.HTTP_200_OK)
+            response = Response({'message': 'Product added/incremented in cart', 'cart': cart_data}, status=status.HTTP_200_OK)
             self.save_cart_items_to_cookie(response, cart_items)
             self.set_cart_item_cookie(request, response, pk, quantity)
             return response
@@ -698,8 +562,7 @@
                     cart_item.quantity -= decrement_quantity
                     cart_item.save()
                     serializer = CartSerializer(cart_item, context={'request': request})
-                    response = Response({'message': 'Product decremented in cart', 'cart': serializer.data},
-                                        status=status.HTTP_200_OK)
+                    response = Response({'message': 'Product decremented in cart', 'cart': serializer.data}, status=status.HTTP_200_OK)
                     self.set_cart_item_cookie(request, response, pk, -decrement_quantity)
                     return response
                 else:
@@ -733,12 +596,45 @@
                     'main_image': product.main_image,
                 })
 
-            response = Response({'message': 'Product decremented in cart', 'cart': cart_data},
-                                status=status.HTTP_200_OK)
+            response = Response({'message': 'Product decremented in cart', 'cart': cart_data}, status=status.HTTP_200_OK)
             self.save_cart_items_to_cookie(response, cart_items)
             self.set_cart_item_cookie(request, response, pk, -decrement_quantity)
             return response
 
+    def delete(self, request, pk):
+        if request.user.is_authenticated:
+            Cart.objects.filter(user=request.user, product=pk).delete()
+            response = Response({'message': 'Item deleted from cart'}, status=status.HTTP_200_OK)
+            self.delete_cart_item_cookie(response, pk)
+            return response
+        else:
+            cart_items = self.get_cart_items_from_cookie(request)
+            for item in cart_items:
+                if item['product_id'] == pk:
+                    cart_items.remove(item)
+                    break
+            else:
+                return Response({'message': 'Product not in cart'}, status=status.HTTP_400_BAD_REQUEST)
+            cart_data = []
+            for item in cart_items:
+                product = Product.objects.get(id=item['product_id'])
+                cart_data.append({
+                    'product': product.id,
+                    'quantity': item['quantity'],
+                    'parts_name': CartSerializer().arrangename(product),
+                    'parts_price': product.parts_price,
+                    'parts_offer': product.parts_offer,
+                    'discount_amount': (product.parts_price * product.parts_offer) / 100,
+                    'final_price': product.parts_price - (product.parts_price * product.parts_offer) / 100,
+                    'main_image': product.main_image,
+                })
+            response = Response({'message': 'Item deleted from cart', 'cart': cart_data}, status=status.HTTP_200_OK)
+            self.save_cart_items_to_cookie(response, cart_items)
+            self.delete_cart_item_cookie(response, pk)
+            return response
+
+class RemoveFromCartView(BaseCartView):
+
     def delete(self, request, pk):
         product = get_object_or_404(Product, pk=pk)
 
@@ -748,35 +644,15 @@
                 cart_item.delete()
                 return Response({'message': 'Product removed from cart'}, status=status.HTTP_200_OK)
             return Response({'error': 'Product not in cart'}, status=status.HTTP_400_BAD_REQUEST)
+
         else:
             cart_items = self.get_cart_items_from_cookie(request)
-            updated_cart_items = [item for item in cart_items if item['product_id'] != pk]
-            if len(updated_cart_items) == len(cart_items):
-                return Response({'error': 'Product not in cart'}, status=status.HTTP_400_BAD_REQUEST)
+            cart_items = [item for item in cart_items if item['product_id'] != pk]
             response = Response({'message': 'Product removed from cart'}, status=status.HTTP_200_OK)
-            self.save_cart_items_to_cookie(response, updated_cart_items)
+            self.save_cart_items_to_cookie(response, cart_items)
             self.delete_cart_item_cookie(response, pk)
-        return response
-
-
-class RemoveFromCartView(BaseCartView):
-
-    def delete(self, request):
-        if request.user.is_authenticated:
-            Cart.objects.filter(user=request.user).delete()
-            response = Response({'message': 'Product removed from cart'}, status=status.HTTP_200_OK)
-            response.delete_cookie('cart')
             return response
 
-        else:
-            cart_items = self.get_cart_items_from_cookie(request)
-            if not cart_items:
-                return Response({'error': 'Cart is already empty'}, status=status.HTTP_400_BAD_REQUEST)
-            response = Response({'message': 'Product removed from cart'}, status=status.HTTP_200_OK)
-            self.clear_cart(request, response)
-            return response
-
-
 class Carouselallview(generics.ListAPIView):
     serializer_class = Carouselserilizers
     queryset = Carousel.objects.all()
@@ -787,18 +663,17 @@
             return Response({'details': 'Carousel Not Found'}, status=status.HTTP_404_NOT_FOUND)
 
         serializer = self.get_serializer(queryset, many=True)
-        return Response({'Carousel': serializer.data}, status=status.HTTP_200_OK)
+        return Response({'Carousel':serializer.data}, status=status.HTTP_200_OK)
 
-
 class Carouseloneview(generics.ListAPIView):
     serializer_class = ProductSerializer
 
     def get_queryset(self):
         carousel_id = self.kwargs.get('pk')
         c = Carousel.objects.get(id=carousel_id)
-        cat = c.carousel_category
-        ban = c.carousel_brand
-        queryset = Product.objects.all().filter(parts_category=cat, parts_brand=ban)
+        cat=c.carousel_category
+        ban=c.carousel_brand
+        queryset = Product.objects.all().filter(parts_category=cat,parts_brand=ban)
         return queryset
 
     def list(self, request, *args, **kwargs):
@@ -824,14 +699,12 @@
             response_data = {
                 "message": "Addresses saved successfully.",
                 "billing_address": Billaddressserializer(result["billing_address"]).data,
-                "shipping_address": Shippingaddressserializer(result["shipping_address"]).data if result[
-                    "shipping_address"] else None
+                "shipping_address": Shippingaddressserializer(result["shipping_address"]).data if result["shipping_address"] else None
             }
             return Response(response_data, status=status.HTTP_200_OK)
         else:
             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
-
 class OrderSummaryAPIView(BaseCartView):
     permission_classes = [IsAuthenticated]
 
@@ -855,7 +728,7 @@
         def parse_cookie_data():
             items = []
             for key, value in request.COOKIES.items():
-                if key.startswith('cart_product_'):
+                if key.startswith('cp_'):
                     try:
                         product_id = int(key.split('_')[2])
                         quantity = int(value)
@@ -905,7 +778,6 @@
                 "product_price": product_data['final_price'],
                 "product_image": product_data['main_image'],
                 "quantity": item["quantity"],
-                'code': item.get('code', []),
                 "total": total,
             })
 
@@ -914,10 +786,8 @@
             self.set_cart_item_cookie(request, response, item["product_id"], item["quantity"])
 
         response.data = {
-            "preferred_billing_address": Billaddressserializer(
-                preferred_billing_address).data if preferred_billing_address else None,
-            "preferred_shipping_address": Shippingaddressserializer(
-                preferred_shipping_address).data if preferred_shipping_address else None,
+            "preferred_billing_address": Billaddressserializer(preferred_billing_address).data if preferred_billing_address else None,
+            "preferred_shipping_address": Shippingaddressserializer(preferred_shipping_address).data if preferred_shipping_address else None,
             "order_items": detailed_order_items,
             "grand_total": grand_total,
         }
@@ -935,12 +805,13 @@
 
         order_items = []
         for key, value in request.COOKIES.items():
-            if key.startswith('product_') or key.startswith('cart_product_'):
-                split_index = 2 if key.startswith('cart_product_') else 1
+            if key.startswith('p_') or key.startswith('cp_'):
+                split_index = 2 if key.startswith('cp_') else 1
                 product_id = int(key.split('_')[split_index])
                 quantity = int(value)
                 order_items.append({"product_id": product_id, "quantity": quantity})
 
+
         if not order_items:
             return Response({"detail": "No order items."}, status=status.HTTP_400_BAD_REQUEST)
 
@@ -988,6 +859,8 @@
 
         if request.user.is_authenticated:
             Cart.objects.filter(user=user).delete()
+        else:
+            Cart.objects.filter(session_key=request.session.session_key).delete()
 
         response = Response(response_data, status=status.HTTP_201_CREATED)
 
@@ -1017,48 +890,3 @@
         #     return self.get_paginated_response(serializer.data)
         # serializer = self.get_serializer(queryset, many=True, context={'request': request})
         # return Response(serializer.data, status=status.HTTP_200_OK)
-
-
-class MyOrderView(APIView):
-    permission_classes = [IsAuthenticated]
-
-    def get(self, request, order_id=None):
-        user = request.user
-
-        def get_order_details(order):
-            product = order.product
-            product_data = ProductSerializer(product, context={'request': request}).data
-            order_details = {
-                'order_id': order.order_id,
-                'order_date': order.order_date,
-                "product_name": product_data['parts_name'],
-                "part_no": product_data['parts_no'],
-                "product_price": product_data['final_price'],
-                "product_image": product_data['main_image'],
-                'quantity': order.quantity,
-            }
-            return order_details
-
-        if order_id:
-            order = get_object_or_404(Order, user=user, order_id=order_id)
-            order_details = get_order_details(order)
-            return Response(order_details, status=status.HTTP_404_NOT_FOUND)
-        orders = Order.objects.filter(user=user)
-        if not orders:
-            return Response({"detail": "No orders found."}, status=status.HTTP_404_NOT_FOUND)
-        all_order_details = [get_order_details(order) for order in orders]
-        return Response(all_order_details, status=status.HTTP_200_OK)
-
-    def delete(self, request, order_id=None):
-        if not order_id:
-            return Response({"detail": "Order ID required"}, status=status.HTTP_400_BAD_REQUEST)
-        user = request.user
-        order = get_object_or_404(Order, user=user, order_id=order_id)
-        product_order_count = get_object_or_404(ProductOrderCount, product=order.product)
-        product_order_count.order_count -= order.quantity
-        if product_order_count.order_count <= 0:
-            product_order_count.order_count = 0
-        product_order_count.save()
-
-        order.delete()
-        return Response({"detail": "Order deleted."}, status=status.HTTP_204_NO_CONTENT)
Index: partcraft/partcraft/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for partcraft project.\r\n\r\nGenerated by 'django-admin startproject' using Django 5.0.6.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\nfrom datetime import timedelta\r\n\r\nfrom django.conf import settings\r\nimport os\r\nimport dj_database_url\r\n# from dotenv import load_dotenv\r\n# load_dotenv()\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-tnrr@^xourvp5u!tz$m__d-3nk6mp#1*ux)_27e251v)im5u$r'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = ['*']\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'parts',\r\n    'account',\r\n    'rest_framework',\r\n    'django_filters',\r\n    'rest_framework.authtoken',\r\n    'rest_framework_simplejwt',\r\n    'django_elasticsearch_dsl',\r\n    'django_elasticsearch_dsl_drf',\r\n]\r\n\r\nREST_FRAMEWORK = {\r\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],\r\n    \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.AllowAny\"],\r\n    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',),\r\n}\r\n\r\nELASTICSEARCH_DSL = {\r\n    'default' : {\r\n        \"hosts\" : \"localhost:9200\",\r\n    }\r\n}\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'partcraft.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'partcraft.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\r\n\r\n# DATABASES = {\r\n#     'default': {\r\n#         'ENGINE': 'django.db.backends.postgresql',\r\n#         'NAME': 'postgres',\r\n#         'USER': 'postgres',\r\n#         'PASSWORD': 'ad3infotech',\r\n#         'HOST': 'localhost',\r\n#         'PORT': '5432',\r\n#     }\r\n# }\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.postgresql',\r\n        'NAME': 'postgres',\r\n        'USER': 'postgres.bjtqyojwojqfmxrxcqcv',\r\n        'PASSWORD': 'gmJqKZh3XxcW8KCF',\r\n        'HOST': 'aws-0-ap-southeast-1.pooler.supabase.com',\r\n        'PORT': '6543',\r\n    }\r\n}\r\n# DATABASES = {\r\n#     'default': {\r\n#         'ENGINE': 'django.db.backends.postgresql_psycopg2',\r\n#         'NAME': os.environ.get(\"DB_NAME\"),\r\n#         'USER': os.environ.get(\"DB_USER\"),\r\n#         'PASSWORD': os.environ.get(\"DB_PASSWORD\"),\r\n#         'HOST': os.environ.get(\"DB_HOST\"),\r\n#         'PORT': os.environ.get(\"DB_PORT\"),\r\n#     }\r\n# }\r\nDATABASES[\"default\"]=dj_database_url.parse(\"postgresql://postgres.bjtqyojwojqfmxrxcqcv:gmJqKZh3XxcW8KCF@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres\")\r\n\r\n# DATABASES[\"default\"]=dj_database_url.parse(\"postgres://partcraft_render_l8s8_user:RcJrxzEJMoDmraOc0jJcJRXLmGKoaA5n@dpg-cppu4ddds78s73ees2q0-a.oregon-postgres.render.com/partcraft_render_l8s8\")\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\nSTATICFILES_DIRS = os.path.join(BASE_DIR, 'static'),\r\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static')\r\n\r\n\r\n\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\nAUTH_USER_MODEL = 'account.User'\r\n\r\n#simple jwt setting\r\nSIMPLE_JWT = {\r\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=20),\r\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\r\n    \"ROTATE_REFRESH_TOKENS\": False,\r\n    \"BLACKLIST_AFTER_ROTATION\": False,\r\n    \"UPDATE_LAST_LOGIN\": False,\r\n\r\n    \"ALGORITHM\": \"HS256\",\r\n    \"SIGNING_KEY\": settings.SECRET_KEY,\r\n    \"VERIFYING_KEY\": \"\",\r\n    \"AUDIENCE\": None,\r\n    \"ISSUER\": None,\r\n    \"JSON_ENCODER\": None,\r\n    \"JWK_URL\": None,\r\n    \"LEEWAY\": 0,\r\n\r\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\r\n    \"AUTH_HEADER_NAME\": \"HTTP_AUTHORIZATION\",\r\n    \"USER_ID_FIELD\": \"id\",\r\n    \"USER_ID_CLAIM\": \"user_id\",\r\n    \"USER_AUTHENTICATION_RULE\": \"rest_framework_simplejwt.authentication.default_user_authentication_rule\",\r\n\r\n    \"AUTH_TOKEN_CLASSES\": (\"rest_framework_simplejwt.tokens.AccessToken\",),\r\n    \"TOKEN_TYPE_CLAIM\": \"token_type\",\r\n    \"TOKEN_USER_CLASS\": \"rest_framework_simplejwt.models.TokenUser\",\r\n\r\n    \"JTI_CLAIM\": \"jti\",\r\n\r\n    \"SLIDING_TOKEN_REFRESH_EXP_CLAIM\": \"refresh_exp\",\r\n    \"SLIDING_TOKEN_LIFETIME\": timedelta(minutes=5),\r\n    \"SLIDING_TOKEN_REFRESH_LIFETIME\": timedelta(days=1),\r\n\r\n    \"TOKEN_OBTAIN_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenObtainPairSerializer\",\r\n    \"TOKEN_REFRESH_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenRefreshSerializer\",\r\n    \"TOKEN_VERIFY_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenVerifySerializer\",\r\n    \"TOKEN_BLACKLIST_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenBlacklistSerializer\",\r\n    \"SLIDING_TOKEN_OBTAIN_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer\",\r\n    \"SLIDING_TOKEN_REFRESH_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer\",\r\n}\r\n\r\nPASSWORD_RESET_TIMEOUT = 1800\r\n\r\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\r\nEMAIL_HOST = 'smtp.gmail.com'\r\nEMAIL_USE_TLS = True\r\nEMAIL_PORT = 587\r\nEMAIL_HOST_USER = 'dhanushpathiprakash0511@gmail.com'\r\nEMAIL_HOST_PASSWORD = 'opghzxooktakptya'\r\n\r\n\r\nCORS_ALLOWED_ORIGINS = [\r\n    \"http://localhost:3000\",\r\n    \"http://127.0.0.1:9000\",\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partcraft/partcraft/settings.py b/partcraft/partcraft/settings.py
--- a/partcraft/partcraft/settings.py	(revision b1b70f1ffde71730cb20517e2b95f3e89c19c667)
+++ b/partcraft/partcraft/settings.py	(date 1721710408007)
@@ -49,8 +49,6 @@
     'django_filters',
     'rest_framework.authtoken',
     'rest_framework_simplejwt',
-    'django_elasticsearch_dsl',
-    'django_elasticsearch_dsl_drf',
 ]
 
 REST_FRAMEWORK = {
@@ -59,12 +57,6 @@
     'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',),
 }
 
-ELASTICSEARCH_DSL = {
-    'default' : {
-        "hosts" : "localhost:9200",
-    }
-}
-
 MIDDLEWARE = [
     'django.middleware.security.SecurityMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
Index: partcraft/parts/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom .models import *\r\nimport random\r\nfrom django_elasticsearch_dsl_drf.serializers import DocumentSerializer\r\nfrom .documents import ProductDocument\r\n\r\nclass BrandSerializer(serializers.ModelSerializer):\r\n    url=serializers.HyperlinkedIdentityField(view_name='brandonedetails')\r\n    class Meta:\r\n        model = Brand\r\n        fields = ['brand_name','brand_image','url']\r\n\r\nclass CategorySerializer(serializers.ModelSerializer):\r\n    url = serializers.HyperlinkedIdentityField(view_name='onecategorydetails')\r\n    class Meta:\r\n        model = Category\r\n        fields = ['category_name','url']\r\n\r\nclass VehicleSerializer(serializers.ModelSerializer):\r\n    url = serializers.HyperlinkedIdentityField(view_name='vehicleonedetail')\r\n    class Meta:\r\n        model = Vehicle\r\n        fields = ['vehicle_name','vehicle_model','vehicle_year','vehicle_type','url']\r\n\r\nclass VehicleoneSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Vehicle\r\n        fields = ['vehicle_name','vehicle_model','vehicle_year','vehicle_type']\r\n\r\nclass ProductImageSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = ProductImage\r\n        fields = ['id', 'image']\r\n\r\nclass WishlistSerializer(serializers.Serializer):\r\n    class Meta:\r\n        model = Wishlist\r\n        fields = ['wishlist_name','wishlist_product']\r\n        read_only_fields = ['wishlist_name']\r\n\r\n    def create(self, validated_data):\r\n        return Wishlist.objects.create(**validated_data)\r\n\r\n\r\n\r\nclass OfferSerializer(serializers.ModelSerializer):\r\n    parts_name = serializers.SerializerMethodField()\r\n    def arrangename(self,obj):\r\n        return (f\"{obj.parts_brand.brand_name} \"\r\n                f\"{obj.parts_category.category_name} \"\r\n                f\"{obj.subcategory_name} \"\r\n                f\"{obj.parts_voltage}V \"\r\n                f\"{obj.parts_fits} \"\r\n                f\"{obj.parts_litre}L\")\r\n    def get_parts_name(self, obj):\r\n        b=self.arrangename(obj)\r\n        return b.replace('NoneL','').strip()\r\n    url = serializers.HyperlinkedIdentityField(view_name='offerproduct')\r\n    class Meta:\r\n        model = Product\r\n        fields = ['parts_name','parts_offer','url']\r\n\r\nclass ProductSerializer(serializers.ModelSerializer):\r\n    parts_brand = BrandSerializer()\r\n    parts_category = CategorySerializer()\r\n    this_parts_fits = VehicleSerializer(many=True)\r\n    images = ProductImageSerializer(many=True)\r\n    parts_name = serializers.SerializerMethodField()\r\n    final_price=serializers.SerializerMethodField()\r\n    url=serializers.HyperlinkedIdentityField(view_name='getoneproduct')\r\n    wishlist=serializers.HyperlinkedIdentityField(view_name='wishlistcreate')\r\n    is_in_wishlist = serializers.SerializerMethodField()\r\n    related_products = serializers.SerializerMethodField()\r\n    similar_products = serializers.SerializerMethodField()\r\n    addtocart= serializers.HyperlinkedIdentityField(view_name='Cartlistcreate')\r\n    buynow = serializers.HyperlinkedIdentityField(view_name='buy_now')\r\n\r\n    class Meta:\r\n        model = Product\r\n        fields = ['id','url','parts_name', 'parts_voltage','subcategory_name',\r\n                  'parts_litre', 'parts_type', 'parts_description', 'parts_no', 'parts_price', 'parts_offer','final_price',\r\n                  'parts_status', 'parts_condition', 'parts_warranty', 'parts_specification',\r\n                  'main_image','images','parts_brand', 'parts_category','this_parts_fits','wishlist','is_in_wishlist','related_products','similar_products','addtocart', 'buynow']\r\n\r\n    def arrangename(self,obj):\r\n        return (f\"{obj.parts_brand.brand_name} \"\r\n                f\"{obj.parts_category.category_name} \"\r\n                f\"{obj.subcategory_name} \"\r\n                f\"{obj.parts_voltage}V \"\r\n                f\"{obj.parts_fits} \"\r\n                f\"{obj.parts_litre}L\")\r\n    def get_parts_name(self, obj):\r\n        b=self.arrangename(obj)\r\n        return b.replace('NoneL','').strip()\r\n\r\n\r\n    def get_final_price(self, obj):\r\n        discount_amount = obj.parts_price * (obj.parts_offer / 100)\r\n        final_price = obj.parts_price - discount_amount\r\n        return final_price\r\n\r\n    def get_related_products(self, obj):\r\n        related_products = Product.objects.filter(\r\n            parts_category=obj.parts_category\r\n        ).exclude(subcategory_name=obj.subcategory_name)  # Fetch 4 related products, excluding the current one\r\n        print(related_products)\r\n        related_products_list = list(related_products)\r\n        sample_size = min(4, len(related_products_list))\r\n        random_related_products = random.sample(related_products_list, sample_size)\r\n        serializer = ProductoneSerializer(random_related_products, many=True, context=self.context)\r\n        return serializer.data\r\n    def get_similar_products(self, obj):\r\n        print(obj.subcategory_name)\r\n        related_products = Product.objects.filter(\r\n            subcategory_name=obj.subcategory_name\r\n        ).exclude(id=obj.id)\r\n        print(related_products)\r\n        serializer = ProductoneSerializer(related_products, many=True, context=self.context)\r\n        return serializer.data\r\n    def get_is_in_wishlist(self, obj):\r\n        request = self.context.get('request', None)\r\n        if not request.user.is_authenticated:\r\n            return 'SIGN IN REQUEST'\r\n        elif request is None:\r\n            return False\r\n        return Wishlist.objects.filter(wishlist_name=request.user.id,wishlist_product=obj).exists()\r\n    def create(self, validated_data):\r\n        brand_data = validated_data.pop('parts_brand')\r\n        category_data = validated_data.pop('parts_category')\r\n        vehicle_data = validated_data.pop('this_parts_fits')\r\n        images_data = validated_data.pop('images', [])\r\n\r\n        brand, created = Brand.objects.get_or_create(**brand_data)\r\n        category, created = Category.objects.get_or_create(**category_data)\r\n        vehicle, created = Vehicle.objects.get_or_create(**vehicle_data)\r\n\r\n        product = Product.objects.create(parts_brand=brand, parts_category=category, this_parts_fits=vehicle, **validated_data)\r\n\r\n        for vehicle in vehicle_data:\r\n            vehicle_obj, created = Vehicle.objects.get_or_create(**vehicle)\r\n            product.this_parts_fits.add(vehicle_obj)\r\n\r\n        for image_data in images_data:\r\n            ProductImage.objects.create(product=product, **image_data)\r\n\r\n        return product\r\n\r\n    def update(self, instance, validated_data):\r\n        brand_data = validated_data.pop('parts_brand')\r\n        category_data = validated_data.pop('parts_category')\r\n        vehicle_data = validated_data.pop('this_parts_fits')\r\n        images_data = validated_data.pop('images', [])\r\n\r\n        instance.parts_brand.name = brand_data.get('name', instance.parts_brand.name)\r\n        instance.parts_brand.save()\r\n\r\n        instance.parts_category.name = category_data.get('name', instance.parts_category.name)\r\n        instance.parts_category.save()\r\n\r\n        instance.this_parts_fits.clear()\r\n        for vehicle in vehicle_data:\r\n            vehicle_obj, created = Vehicle.objects.get_or_create(**vehicle)\r\n            instance.this_parts_fits.add(vehicle_obj)\r\n\r\n        instance.subcategory_name = validated_data.get('subcategory_name', instance.subcategory_name)\r\n        instance.parts_voltage = validated_data.get('parts_voltage', instance.parts_voltage)\r\n        instance.parts_fits = validated_data.get('parts_fits', instance.parts_fits)\r\n        instance.parts_litre = validated_data.get('parts_litre', instance.parts_litre)\r\n        instance.parts_type = validated_data.get('parts_type', instance.parts_type)\r\n        instance.parts_description = validated_data.get('parts_description', instance.parts_description)\r\n        instance.parts_no = validated_data.get('parts_no', instance.parts_no)\r\n        instance.parts_price = validated_data.get('parts_price', instance.parts_price)\r\n        instance.parts_offer = validated_data.get('parts_offer', instance.parts_offer)\r\n        instance.parts_status = validated_data.get('parts_status', instance.parts_status)\r\n        instance.parts_condition = validated_data.get('parts_condition', instance.parts_condition)\r\n        instance.parts_warranty = validated_data.get('parts_warranty', instance.parts_warranty)\r\n        instance.parts_specification = validated_data.get('parts_specification', instance.parts_specification)\r\n        instance.main_image = validated_data.get('main_image', instance.main_image)\r\n        instance.save()\r\n\r\n        # Update images\r\n        keep_images = []\r\n        for image_data in images_data:\r\n            image_id = image_data.get('id')\r\n            if image_id:\r\n\r\n                image_instance = ProductImage.objects.get(id=image_id, product=instance)\r\n                image_instance.image = image_data.get('image', image_instance.image)\r\n                image_instance.save()\r\n                keep_images.append(image_instance.id)\r\n            else:\r\n\r\n                new_image = ProductImage.objects.create(product=instance, **image_data)\r\n                keep_images.append(new_image.id)\r\n\r\n\r\n        for image_instance in instance.images.all():\r\n            if image_instance.id not in keep_images:\r\n                image_instance.delete()\r\n\r\n        return instance\r\n\r\nclass ProductoneSerializer(serializers.ModelSerializer):\r\n    parts_name = serializers.SerializerMethodField()\r\n    final_price = serializers.SerializerMethodField()\r\n    product_full_detail = serializers.HyperlinkedIdentityField(view_name='getoneproduct')\r\n    wishlist = serializers.HyperlinkedIdentityField(view_name='wishlistcreate')\r\n    is_in_wishlist = serializers.SerializerMethodField()\r\n\r\n\r\n    class Meta:\r\n        model = Product\r\n        fields = ['id','parts_type' ,'parts_name', 'parts_price', 'parts_offer', 'final_price', 'main_image', 'product_full_detail','wishlist','is_in_wishlist']\r\n\r\n    def arrangename(self,obj):\r\n        return (f\"{obj.parts_brand.brand_name} \"\r\n                f\"{obj.parts_category.category_name} \"\r\n                f\"{obj.subcategory_name} \"\r\n                f\"{obj.parts_voltage}V \"\r\n                f\"{obj.parts_fits} \"\r\n                f\"{obj.parts_litre}L\")\r\n    def get_parts_name(self, obj):\r\n        b=self.arrangename(obj)\r\n        return b.replace('NoneL','').strip()\r\n    def get_final_price(self, obj):\r\n        discount_amount = obj.parts_price * (obj.parts_offer / 100)\r\n        final_price = obj.parts_price - discount_amount\r\n        return final_price\r\n\r\n    def get_is_in_wishlist(self, obj):\r\n        request = self.context.get('request', None)\r\n        if not request.user.is_authenticated:\r\n            return 'SIGN IN REQUEST'\r\n        elif request is None:\r\n            return False\r\n        return Wishlist.objects.filter(wishlist_name=request.user.id, wishlist_product=obj).exists()\r\n\r\nclass WishallSerializer(serializers.ModelSerializer):\r\n    wishlist_product=ProductSerializer()\r\n    wishlist_name = serializers.SerializerMethodField()\r\n    wishlist_delete=serializers.HyperlinkedIdentityField(view_name='wishdeleteoneitem')\r\n    # wishlistdelall=serializers.HyperlinkedIdentityField(view_name='wishdeleteitem')\r\n    class Meta:\r\n        model = Wishlist\r\n        fields = ['wishlist_name','wishlist_product','wishlist_delete']\r\n        read_only_fields = ['wishlist_name']\r\n\r\n    def arrangename(self,obj):\r\n        return (f\"{obj.parts_brand.brand_name} \"\r\n                f\"{obj.parts_category.category_name} \"\r\n                f\"{obj.subcategory_name} \"\r\n                f\"{obj.parts_voltage}V \"\r\n                f\"{obj.parts_fits} \"\r\n                f\"{obj.parts_litre}L\")\r\n    def get_parts_name(self, obj):\r\n        b=self.arrangename(obj)\r\n        return b.replace('NoneL','').strip()\r\n    def get_wishlist_name(self, obj):\r\n        return obj.wishlist_name.email\r\n\r\nclass CartSerializer(serializers.ModelSerializer):\r\n    user_name=serializers.SerializerMethodField()\r\n    parts_name = serializers.SerializerMethodField()\r\n    parts_offer = serializers.SerializerMethodField()\r\n    parts_price = serializers.SerializerMethodField()\r\n    discount_amount = serializers.SerializerMethodField()\r\n    final_price = serializers.SerializerMethodField()\r\n    main_image=serializers.SerializerMethodField()\r\n    code = serializers.SerializerMethodField()\r\n\r\n    class Meta:\r\n        model = Cart\r\n        fields = ['user','user_name','product','quantity','parts_name','parts_price','parts_offer','discount_amount','final_price','main_image', 'code']\r\n\r\n    def get_user_name(self, obj):\r\n        request = self.context.get('request')\r\n        if request.user.is_authenticated:\r\n            return obj.user.email\r\n        else:\r\n            return None\r\n    def arrangename(self,product):\r\n        return (f\"{product.parts_brand.brand_name} \"\r\n                f\"{product.parts_category.category_name} \"\r\n                f\"{product.subcategory_name} \"\r\n                f\"{product.parts_voltage}V \"\r\n                f\"{product.parts_fits} \"\r\n                f\"{product.parts_litre}L\")\r\n\r\n    def get_parts_name(self, obj):\r\n        product=obj.product\r\n        b=self.arrangename(product)\r\n        return b.replace('NoneL','').strip()\r\n\r\n    def get_parts_offer(self,obj):\r\n        product=obj.product\r\n        return product.parts_offer\r\n    def get_parts_price(self,obj):\r\n        product=obj.product\r\n        return product.parts_price\r\n    def get_discount_amount(self,obj):\r\n        product=obj.product\r\n        discount_amount = product.parts_price * (product.parts_offer / 100)\r\n        return discount_amount\r\n\r\n    def get_code(self,obj):\r\n        return list(obj.code.values_list('carousel_code',flat=True))\r\n\r\n    def get_final_price(self, obj):\r\n        product=obj.product\r\n        print(product.parts_price,product.parts_offer)\r\n        discount_amount = product.parts_price * (product.parts_offer / 100)\r\n        final_amount=product.parts_price - discount_amount\r\n        return final_amount\r\n\r\n    def get_main_image(self,obj):\r\n        product=obj.product\r\n        return product.main_image\r\n    def create(self, validated_data):\r\n        request=self.context.get('request')\r\n        if request.user.is_authenticated:\r\n            validated_data['user']=request.user\r\n        code_data = validated_data.pop('code', None)\r\n        cart = Cart.objects.create(**validated_data)\r\n        if code_data:\r\n            cart.code.set(code_data)\r\n        return cart\r\n        # else:\r\n        #     validated_data['session_key']=request.session.session_key\r\n        # return Cart.objects.create(**validated_data)\r\n\r\nclass Carouselserilizers(serializers.ModelSerializer):\r\n    discount=serializers.SerializerMethodField()\r\n    ref=serializers.SerializerMethodField()\r\n    brand=serializers.SerializerMethodField()\r\n    image=serializers.SerializerMethodField()\r\n    code=serializers.SerializerMethodField()\r\n    category=serializers.SerializerMethodField()\r\n    url=serializers.HyperlinkedIdentityField(view_name='carouseloneview')\r\n\r\n\r\n    class Meta:\r\n        model=Carousel\r\n        fields = ['image','discount','category','code','ref','brand','url']\r\n\r\n\r\n    def get_code(self,obj):\r\n        return obj.carousel_code\r\n\r\n    def get_category(self,obj):\r\n        return obj.carousel_category.category_name\r\n\r\n    def get_image(self,obj):\r\n        return obj.carousel_image\r\n    def get_discount(self,obj):\r\n        return f'Get {obj.carousel_offer}% off'\r\n    def get_ref(self,obj):\r\n        return f'{obj.carousel_offer}% off {obj.carousel_category.category_name}'\r\n    def get_brand(self,obj):\r\n        return f'{obj.carousel_brand.brand_name} brand only'\r\n\r\nclass Billaddressserializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = BillingAddress\r\n        fields = ['user', 'billing_name', 'gst_number', 'email', 'billing_address', 'contact']\r\n\r\nclass Shippingaddressserializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = ShippingAddress\r\n        fields = '__all__'\r\n\r\nclass Buynowserilizers(serializers.Serializer):\r\n    billing_address = Billaddressserializer()\r\n    shipping_address = Shippingaddressserializer(required=False)\r\n    use_same_address_for_shipping = serializers.BooleanField(default=False)\r\n    use_the_address_for_next_time = serializers.BooleanField(default=False)\r\n\r\n    def to_internal_value(self, data):\r\n        return_user = self.context[\"request\"].user\r\n        if 'billing_address' in data:\r\n            data['billing_address']['user'] = return_user.id\r\n        if 'shipping_address' in data:\r\n            data['shipping_address']['user'] = return_user.id\r\n\r\n        return super().to_internal_value(data)\r\n\r\n    def create(self, validated_data):\r\n        billing_address_data = validated_data.pop('billing_address')\r\n        use_same_address_for_shipping = validated_data.pop('use_same_address_for_shipping', False)\r\n        use_the_address_for_next_time = validated_data.pop('use_the_address_for_next_time', False)\r\n        user = self.context['request'].user\r\n\r\n        # Create BillingAddress instance\r\n        billing_address_data['user'] = user\r\n        billing_instance = BillingAddress.objects.create(**billing_address_data)\r\n\r\n        print(billing_instance)\r\n\r\n        shipping_instance = None\r\n        if use_same_address_for_shipping:\r\n            shipping_address_data = {\r\n                'user': user,\r\n                'shipping_name': billing_instance.billing_name,\r\n                'email': billing_instance.email,\r\n                'shipping_address': billing_instance.billing_address,\r\n                'contact': billing_instance.contact,\r\n            }\r\n            shipping_instance = ShippingAddress.objects.create(**shipping_address_data)\r\n        else:\r\n            shipping_address_data = validated_data.pop('shipping_address', None)\r\n            if shipping_address_data:\r\n                shipping_address_data['user'] = user\r\n                shipping_instance = ShippingAddress.objects.create(**shipping_address_data)\r\n\r\n        if use_the_address_for_next_time:\r\n            user_profile, created = Profile.objects.get_or_create(user=user)\r\n            user_profile.preferred_billing_address = billing_instance\r\n            user_profile.preferred_shipping_address = shipping_instance\r\n            user_profile.save()\r\n\r\n        return {\r\n            \"billing_address\": billing_instance,\r\n            \"shipping_address\": shipping_instance,\r\n        }\r\n\r\nclass OrderSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Order\r\n        fields = ['order_id', 'order_date']\r\n\r\nclass Bestsellingserializer(serializers.ModelSerializer):\r\n    parts_type = serializers.SerializerMethodField(source='product.parts_type')\r\n    parts_name = serializers.SerializerMethodField()\r\n    parts_price = serializers.SerializerMethodField()\r\n    parts_offer = serializers.SerializerMethodField()\r\n    final_price = serializers.SerializerMethodField()\r\n    main_image = serializers.SerializerMethodField()\r\n    product_full_detail = serializers.HyperlinkedIdentityField(view_name='getoneproduct')\r\n    wishlist = serializers.HyperlinkedIdentityField(view_name='wishlistcreate')\r\n    is_in_wishlist = serializers.SerializerMethodField()\r\n    class Meta:\r\n        model = ProductOrderCount\r\n        fields = ['id', 'parts_type', 'parts_name', 'parts_price', 'parts_offer', 'final_price', 'main_image', 'product_full_detail', 'wishlist', 'is_in_wishlist']\r\n\r\n    def get_parts_type(self, obj):\r\n        return obj.product.parts_type\r\n    def arrangename(self, obj):\r\n        product = obj.product\r\n        return (f\"{product.parts_brand.brand_name} \"\r\n                f\"{product.parts_category.category_name} \"\r\n                f\"{product.subcategory_name} \"\r\n                f\"{product.parts_voltage}V \"\r\n                f\"{product.parts_fits} \"\r\n                f\"{product.parts_litre}L\")\r\n\r\n    def get_parts_name(self, obj):\r\n        b = self.arrangename(obj)\r\n        return b.replace('NoneL', '').strip()\r\n\r\n    def get_parts_price(self, obj):\r\n        return obj.product.parts_price\r\n\r\n    def get_parts_offer(self, obj):\r\n        return obj.product.parts_offer\r\n\r\n    def get_final_price(self, obj):\r\n        product = obj.product\r\n        discount_amount = product.parts_price * (product.parts_offer / 100)\r\n        final_price = product.parts_price - discount_amount\r\n        return final_price\r\n\r\n    def get_main_image(self, obj):\r\n        return obj.product.main_image\r\n\r\n    def get_is_in_wishlist(self, obj):\r\n        request = self.context.get('request', None)\r\n        if not request.user.is_authenticated:\r\n            return 'SIGN IN REQUEST'\r\n        elif request is None:\r\n            return False\r\n        return Wishlist.objects.filter(wishlist_name=request.user.id, wishlist_product=obj).exists()\r\n\r\nclass Carouselpostserializer(serializers.ModelSerializer):\r\n    # code=serializers.SerializerMethodField()\r\n\r\n    class Meta:\r\n        model=Carousel\r\n        fields=['carousel_code']\r\n\r\n    # def get_code(self,obj):\r\n    #     return obj.carousel_code\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partcraft/parts/serializers.py b/partcraft/parts/serializers.py
--- a/partcraft/parts/serializers.py	(revision b1b70f1ffde71730cb20517e2b95f3e89c19c667)
+++ b/partcraft/parts/serializers.py	(date 1721710412660)
@@ -1,8 +1,6 @@
 from rest_framework import serializers
 from .models import *
 import random
-from django_elasticsearch_dsl_drf.serializers import DocumentSerializer
-from .documents import ProductDocument
 
 class BrandSerializer(serializers.ModelSerializer):
     url=serializers.HyperlinkedIdentityField(view_name='brandonedetails')
@@ -81,7 +79,6 @@
                   'parts_litre', 'parts_type', 'parts_description', 'parts_no', 'parts_price', 'parts_offer','final_price',
                   'parts_status', 'parts_condition', 'parts_warranty', 'parts_specification',
                   'main_image','images','parts_brand', 'parts_category','this_parts_fits','wishlist','is_in_wishlist','related_products','similar_products','addtocart', 'buynow']
-
     def arrangename(self,obj):
         return (f"{obj.parts_brand.brand_name} "
                 f"{obj.parts_category.category_name} "
@@ -113,7 +110,7 @@
         print(obj.subcategory_name)
         related_products = Product.objects.filter(
             subcategory_name=obj.subcategory_name
-        ).exclude(id=obj.id)
+        ).exclude(id=obj.id)  # Fetch 4 related products, excluding the current one
         print(related_products)
         serializer = ProductoneSerializer(related_products, many=True, context=self.context)
         return serializer.data
@@ -266,11 +263,10 @@
     discount_amount = serializers.SerializerMethodField()
     final_price = serializers.SerializerMethodField()
     main_image=serializers.SerializerMethodField()
-    code = serializers.SerializerMethodField()
 
     class Meta:
         model = Cart
-        fields = ['user','user_name','product','quantity','parts_name','parts_price','parts_offer','discount_amount','final_price','main_image', 'code']
+        fields = ['user','user_name','product','quantity','parts_name','parts_price','parts_offer','discount_amount','final_price','main_image']
 
     def get_user_name(self, obj):
         request = self.context.get('request')
@@ -302,8 +298,6 @@
         discount_amount = product.parts_price * (product.parts_offer / 100)
         return discount_amount
 
-    def get_code(self,obj):
-        return list(obj.code.values_list('carousel_code',flat=True))
 
     def get_final_price(self, obj):
         product=obj.product
@@ -319,15 +313,11 @@
         request=self.context.get('request')
         if request.user.is_authenticated:
             validated_data['user']=request.user
-        code_data = validated_data.pop('code', None)
-        cart = Cart.objects.create(**validated_data)
-        if code_data:
-            cart.code.set(code_data)
-        return cart
         # else:
         #     validated_data['session_key']=request.session.session_key
         # return Cart.objects.create(**validated_data)
 
+
 class Carouselserilizers(serializers.ModelSerializer):
     discount=serializers.SerializerMethodField()
     ref=serializers.SerializerMethodField()
@@ -487,5 +477,4 @@
         fields=['carousel_code']
 
     # def get_code(self,obj):
-    #     return obj.carousel_code
-
+    #     return obj.carousel_code
\ No newline at end of file
Index: partcraft/parts/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path, include\r\nfrom rest_framework import routers\r\nfrom .views import *\r\n\r\n\r\n\r\nurlpatterns = [\r\n    path('allproducts/',partslistview.as_view(),name='allproducts'),\r\n    path('allproducts1/',partslistsDocumentView.as_view({'get':'list'}),name='allproducts'),\r\n    path('getoneproduct/<int:pk>/',partsonedetail.as_view(),name='getoneproduct'),\r\n    path('allcategory/',categorylistview.as_view(),name='allcatetgories'),\r\n    path('onecategorydetails/<int:pk>/',categoryonedetail.as_view(),name='onecategorydetails'),\r\n    path('allbrand/',brandlistview.as_view(),name='allbrands'),\r\n    path('brandonedetails/<int:pk>/',brandonedetail.as_view(),name='brandonedetails'),\r\n    path('allvehicles/',vehiclelistview.as_view(),name='allvehicles'),\r\n    path('vehiclegetview/',vehicle_view,name='vechilegetview'),\r\n    path('vehicleonedetail/<int:pk>/',vehicleoneview.as_view(),name='vehicleonedetail'),\r\n    path('alloffer/',allofferview.as_view(),name='alloffer'),\r\n    path('offerproduct/<int:pk>/',partsonedetail.as_view(),name='offerproduct'),\r\n    path('wishlistcreate/<int:pk>/',WishlistCreateView.as_view(),name='wishlistcreate'),\r\n    path('wishallview/',WishallView.as_view(),name='wishallview'),\r\n    path('wishdeleteoneitem/<int:pk>/', DeleteWishlistItemView.as_view(), name='wishdeleteoneitem'),\r\n    path('wishdeleteitem/', DeleteAllWishlistItemsView.as_view(), name='wishdeleteitem'),\r\n    path('cartlistcreate/<int:pk>/',CartItemsCreateView.as_view(),name='Cartlistcreate'),\r\n    path('viewcartlist/',ViewCartView.as_view(),name='viewcartlist'),\r\n    path('removecartitem/<int:pk>/',CartItemsCreateView.as_view(),name='removecartitem'),\r\n    path('clearallcartitem/', RemoveFromCartView.as_view(),name='clearallcartitem'),\r\n    path('carouselallview/',Carouselallview.as_view(),name='carouselallview'),\r\n    path('carouseloneview/<int:pk>',Carouseloneview.as_view(),name='carouseloneview'),\r\n    path('buynow/<int:pk>/', BuyNowAPIView.as_view(), name='buy_now'),\r\n    path('order_summary/', OrderSummaryAPIView.as_view(), name='order_summary'),\r\n    path('place_order/', OrderAPIView.as_view(), name='place_order'),\r\n    path('couponcodeapply/',ViewCartView.as_view(),name='couponcodeapply'),\r\n    path('best_selling/', BestSellingView.as_view(), name='best_selling'),\r\n    path('my_order/', MyOrderView.as_view(), name='my_order'),\r\n    path('order_status/<str:order_id>/', MyOrderView.as_view(), name='order_status'),\r\n]\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partcraft/parts/urls.py b/partcraft/parts/urls.py
--- a/partcraft/parts/urls.py	(revision b1b70f1ffde71730cb20517e2b95f3e89c19c667)
+++ b/partcraft/parts/urls.py	(date 1721710417233)
@@ -6,7 +6,6 @@
 
 urlpatterns = [
     path('allproducts/',partslistview.as_view(),name='allproducts'),
-    path('allproducts1/',partslistsDocumentView.as_view({'get':'list'}),name='allproducts'),
     path('getoneproduct/<int:pk>/',partsonedetail.as_view(),name='getoneproduct'),
     path('allcategory/',categorylistview.as_view(),name='allcatetgories'),
     path('onecategorydetails/<int:pk>/',categoryonedetail.as_view(),name='onecategorydetails'),
@@ -23,8 +22,8 @@
     path('wishdeleteitem/', DeleteAllWishlistItemsView.as_view(), name='wishdeleteitem'),
     path('cartlistcreate/<int:pk>/',CartItemsCreateView.as_view(),name='Cartlistcreate'),
     path('viewcartlist/',ViewCartView.as_view(),name='viewcartlist'),
-    path('removecartitem/<int:pk>/',CartItemsCreateView.as_view(),name='removecartitem'),
-    path('clearallcartitem/', RemoveFromCartView.as_view(),name='clearallcartitem'),
+    path('removecartitem/<int:pk>/',RemoveFromCartView.as_view(),name='removecartitem'),
+    path('clearallcartitem/',CartItemsCreateView.as_view(),name='clearallcartitem'),
     path('carouselallview/',Carouselallview.as_view(),name='carouselallview'),
     path('carouseloneview/<int:pk>',Carouseloneview.as_view(),name='carouseloneview'),
     path('buynow/<int:pk>/', BuyNowAPIView.as_view(), name='buy_now'),
@@ -32,7 +31,5 @@
     path('place_order/', OrderAPIView.as_view(), name='place_order'),
     path('couponcodeapply/',ViewCartView.as_view(),name='couponcodeapply'),
     path('best_selling/', BestSellingView.as_view(), name='best_selling'),
-    path('my_order/', MyOrderView.as_view(), name='my_order'),
-    path('order_status/<str:order_id>/', MyOrderView.as_view(), name='order_status'),
 ]
 
Index: partcraft/parts/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom .models import *\r\n\r\n@admin.register(Product)\r\nclass ProductAdmin(admin.ModelAdmin):\r\n    list_display = ['id', 'parts_brand','parts_category','subcategory_name','parts_price', 'parts_status','parts_offer','main_image']\r\n#\r\n@admin.register(ProductImage)\r\nclass ProductImageAdmin(admin.ModelAdmin):\r\n    list_display = ['product', 'image']\r\n\r\n# admin.site.register(Product)\r\n\r\n\r\n@admin.register(Vehicle)\r\nclass VehicleAdmin(admin.ModelAdmin):\r\n    list_display = ['vehicle_name', 'vehicle_model', 'vehicle_year', 'vehicle_type']\r\n\r\n@admin.register(Brand)\r\nclass BrandAdmin(admin.ModelAdmin):\r\n    list_display = ['brand_name', 'brand_image']\r\n\r\n\r\n@admin.register(Category)\r\nclass CategoryAdmin(admin.ModelAdmin):\r\n    list_display = ['category_name', 'category_image']\r\n\r\n\r\n@admin.register(Wishlist)\r\nclass WishlistAdmin(admin.ModelAdmin):\r\n    list_display = ['wishlist_name', 'wishlist_product']\r\n\r\n\r\n@admin.register(Cart)\r\nclass CartAdmin(admin.ModelAdmin):\r\n    list_display = ['user', 'product', 'quantity']\r\n\r\n@admin.register(Carousel)\r\nclass CarouselAdmin(admin.ModelAdmin):\r\n    list_display = ['carousel_image','carousel_category','carousel_code','carousel_brand']\r\n\r\n\r\n\r\n@admin.register(BillingAddress)\r\nclass BillingAddressAdmin(admin.ModelAdmin):\r\n    list_display = ['user', 'billing_name', 'billing_address']\r\n\r\n@admin.register(ShippingAddress)\r\nclass ShippingAddressAdmin(admin.ModelAdmin):\r\n    list_display = ['user', 'shipping_name', 'shipping_address']\r\n\r\n@admin.register(Profile)\r\nclass ProfileAdmin(admin.ModelAdmin):\r\n    list_display = ['user', 'preferred_billing_address', 'preferred_shipping_address']\r\n\r\n@admin.register(Order)\r\nclass OrderAdmin(admin.ModelAdmin):\r\n    list_display = ['order_id', 'order_date', 'product']\r\n\r\n@admin.register(ProductOrderCount)\r\nclass ProductOrderCountAdmin(admin.ModelAdmin):\r\n    list_display = ['product', 'order_count']
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partcraft/parts/admin.py b/partcraft/parts/admin.py
--- a/partcraft/parts/admin.py	(revision b1b70f1ffde71730cb20517e2b95f3e89c19c667)
+++ b/partcraft/parts/admin.py	(date 1721710417269)
@@ -33,7 +33,7 @@
 
 @admin.register(Cart)
 class CartAdmin(admin.ModelAdmin):
-    list_display = ['user', 'product', 'quantity']
+    list_display = ['id','user', 'product', 'quantity']
 
 @admin.register(Carousel)
 class CarouselAdmin(admin.ModelAdmin):
Index: partcraft/parts/documents.py
===================================================================
diff --git a/partcraft/parts/documents.py b/partcraft/parts/documents.py
deleted file mode 100644
--- a/partcraft/parts/documents.py	(revision b1b70f1ffde71730cb20517e2b95f3e89c19c667)
+++ /dev/null	(revision b1b70f1ffde71730cb20517e2b95f3e89c19c667)
@@ -1,135 +0,0 @@
-from django_elasticsearch_dsl import Document, fields, Index
-from .models import *
-from elasticsearch import Elasticsearch
-
-# client = Elasticsearch(
-#   "https://8ac9c4b4863b40adbf1f07e3302743ed.us-central1.gcp.cloud.es.io:443",
-#   api_key="NllCYTBaQUIxWkd3SFZMV2dwNnY6Q1VIYlcwVTFTZzJPV0oxWlVkaVlTdw=="
-# )
-# client.info()
-# print(client.info())
-
-PUBLISHER_INDEX = Index('product')
-PUBLISHER_INDEX.settings(
-    number_of_shards=5,
-    number_of_replicas=5,
-    analysis={
-        'analyzer': {
-            'custom_analyzer': {
-                'type': 'custom',
-                'tokenizer': 'standard',
-                'filter': [
-                    'lowercase',
-                    'edge_ngram_filter'
-                ]
-            }
-        },
-        'filter': {
-            'edge_ngram_filter': {
-                'type': 'edge_ngram',
-                # 'min_gram': 0,
-                # 'max_gram': 0,
-                'token_chars': ['letter', 'digit', 'word', 'punctuation', 'sentence']
-            }
-        }
-    }
-)
-
-
-@PUBLISHER_INDEX.doc_type
-class ProductDocument(Document):
-    id = fields.IntegerField(attr="id")
-    parts_brand = fields.TextField(
-        fields={
-            "raw": {
-                "type": "keyword"
-            }
-        },
-        analyzer='custom_analyzer'
-    )
-    parts_category = fields.TextField(
-        fields={
-            "raw": {
-                "type": "keyword"
-            }
-        },
-        analyzer='custom_analyzer'
-    )
-    subcategory_name = fields.TextField(
-        fields={
-            "raw": {
-                "type": "keyword"
-            }
-        },
-    )
-    final_price = fields.FloatField(
-        fields={
-            "raw": {
-                "type": "keyword"
-            }
-        }
-    )
-    parts_no = fields.TextField(
-        fields={
-            "raw": {
-                "type": "keyword"
-            }
-        },
-    )
-    parts_offer = fields.IntegerField(
-        fields={
-            "raw": {
-                "type": "keyword"
-            }
-        }
-    )
-    parts_fits = fields.TextField(
-        fields={
-            "raw": {
-                "type": "keyword"
-            }
-        },
-    )
-    parts_type = fields.TextField(
-        fields={
-            "raw": {
-                "type": "keyword"
-            }
-        },
-    )
-
-
-    class Django(object):
-        model = Product
-
-    def prepare_parts_brand(self, instance):
-        return instance.parts_brand.brand_name if instance.parts_brand else None
-
-    def prepare_parts_category(self, instance):
-        return instance.parts_category.category_name if instance.parts_category else None
-
-    def prepare_subcategory_name(self, instance):
-        return instance.subcategory_name if instance.subcategory_name else None
-
-    def prepare_final_price(self, instance):
-        if instance.parts_price:
-            if instance.parts_offer:
-                disount_amount = instance.parts_price * (instance.parts_offer / 100)
-                final_price = instance.parts_price - disount_amount
-            else:
-                final_price = instance.parts_price
-            return final_price
-        return None
-
-    def prepare_parts_no(self, instance):
-        return instance.parts_no if instance.parts_no else None
-
-    def prepare_parts_offer(self, instance):
-        return instance.parts_offer if instance.parts_offer else None
-
-    def prepare_parts_fits(self, instance):
-        return instance.parts_fits if instance.parts_fits else None
-
-    def prepare_parts_type(self, instance):
-        return instance.parts_type if instance.parts_type else None
-
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8a259d45-3f5d-4858-a05d-0f3155ed5749\" name=\"Changes\" comment=\"Elastic Search is updated\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/partcraft/parts/documents.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/partcraft/parts/documents.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Dockerfile\" />\r\n        <option value=\"package.json\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;DhanushpathiPrakash&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Nandhaad3/partcraft.git&quot;,\r\n    &quot;accountId&quot;: &quot;50aaa3d5-14e2-4a1f-a422-41718d8ff016&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2hgNzB08wPlerAFDK8Frw8IFq0S\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;Python.views.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;E:/partcraft/partcraft/account/migrations&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;project.propVCSSupport.DirectoryMappings&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\partcraft\\partcraft\\account\\migrations\" />\r\n      <recent name=\"E:\\partcraft\\partcraft\\user\" />\r\n      <recent name=\"E:\\partcraft\\partcraft\" />\r\n      <recent name=\"E:\\partcraft\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-PY-241.17890.14\" />\r\n        <option value=\"bundled-python-sdk-5b207ade9991-7e9c3bbb6e34-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.17890.14\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8a259d45-3f5d-4858-a05d-0f3155ed5749\" name=\"Changes\" comment=\"\" />\r\n      <created>1718012024179</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1718012024179</updated>\r\n      <workItem from=\"1718012025723\" duration=\"2217000\" />\r\n      <workItem from=\"1718083684590\" duration=\"7961000\" />\r\n      <workItem from=\"1718096774607\" duration=\"2387000\" />\r\n      <workItem from=\"1718099267036\" duration=\"2353000\" />\r\n      <workItem from=\"1718101796895\" duration=\"6668000\" />\r\n      <workItem from=\"1718167973828\" duration=\"10349000\" />\r\n      <workItem from=\"1718183620064\" duration=\"381000\" />\r\n      <workItem from=\"1718184979238\" duration=\"1422000\" />\r\n      <workItem from=\"1718253806197\" duration=\"7550000\" />\r\n      <workItem from=\"1718270061287\" duration=\"18123000\" />\r\n      <workItem from=\"1718341188949\" duration=\"7558000\" />\r\n      <workItem from=\"1718353261297\" duration=\"5838000\" />\r\n      <workItem from=\"1718601464038\" duration=\"8620000\" />\r\n      <workItem from=\"1718616009069\" duration=\"11291000\" />\r\n      <workItem from=\"1718687229470\" duration=\"78000\" />\r\n      <workItem from=\"1718688360866\" duration=\"9603000\" />\r\n      <workItem from=\"1718713020277\" duration=\"7743000\" />\r\n      <workItem from=\"1718771710244\" duration=\"3816000\" />\r\n      <workItem from=\"1718792515062\" duration=\"2434000\" />\r\n      <workItem from=\"1718860021274\" duration=\"11441000\" />\r\n      <workItem from=\"1718876732887\" duration=\"5641000\" />\r\n      <workItem from=\"1719207152951\" duration=\"679000\" />\r\n      <workItem from=\"1719381912328\" duration=\"877000\" />\r\n      <workItem from=\"1719388485710\" duration=\"2821000\" />\r\n      <workItem from=\"1719809616446\" duration=\"7465000\" />\r\n      <workItem from=\"1719896893706\" duration=\"3361000\" />\r\n      <workItem from=\"1719911220909\" duration=\"1334000\" />\r\n      <workItem from=\"1719927692520\" duration=\"2106000\" />\r\n      <workItem from=\"1719945704578\" duration=\"3690000\" />\r\n      <workItem from=\"1720074060405\" duration=\"315000\" />\r\n      <workItem from=\"1720861997725\" duration=\"300000\" />\r\n      <workItem from=\"1720862375324\" duration=\"876000\" />\r\n      <workItem from=\"1720884895320\" duration=\"2770000\" />\r\n      <workItem from=\"1721019128201\" duration=\"7817000\" />\r\n      <workItem from=\"1721049572403\" duration=\"12971000\" />\r\n      <workItem from=\"1721106606365\" duration=\"18339000\" />\r\n      <workItem from=\"1721126912414\" duration=\"1094000\" />\r\n      <workItem from=\"1721128096681\" duration=\"3435000\" />\r\n      <workItem from=\"1721135835803\" duration=\"4673000\" />\r\n      <workItem from=\"1721192811505\" duration=\"6267000\" />\r\n      <workItem from=\"1721221192713\" duration=\"2499000\" />\r\n      <workItem from=\"1721223702744\" duration=\"2237000\" />\r\n      <workItem from=\"1721226178247\" duration=\"2056000\" />\r\n      <workItem from=\"1721233434266\" duration=\"878000\" />\r\n      <workItem from=\"1721277235521\" duration=\"3643000\" />\r\n      <workItem from=\"1721284359207\" duration=\"9594000\" />\r\n      <workItem from=\"1721365924039\" duration=\"8556000\" />\r\n      <workItem from=\"1721378054834\" duration=\"5540000\" />\r\n      <workItem from=\"1721383782975\" duration=\"4869000\" />\r\n      <workItem from=\"1721388839434\" duration=\"2676000\" />\r\n      <workItem from=\"1721395970836\" duration=\"6112000\" />\r\n      <workItem from=\"1721404303064\" duration=\"1717000\" />\r\n      <workItem from=\"1721455452081\" duration=\"12352000\" />\r\n      <workItem from=\"1721490058026\" duration=\"90000\" />\r\n      <workItem from=\"1721495049423\" duration=\"325000\" />\r\n      <workItem from=\"1721495385261\" duration=\"2910000\" />\r\n      <workItem from=\"1721498366403\" duration=\"1914000\" />\r\n      <workItem from=\"1721551614738\" duration=\"2363000\" />\r\n      <workItem from=\"1721568172512\" duration=\"2054000\" />\r\n      <workItem from=\"1721577981652\" duration=\"1442000\" />\r\n      <workItem from=\"1721622621132\" duration=\"6001000\" />\r\n      <workItem from=\"1721633302504\" duration=\"5047000\" />\r\n      <workItem from=\"1721642741943\" duration=\"4535000\" />\r\n      <workItem from=\"1721648339426\" duration=\"1585000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Bestselling&#10;created a best selling serializers and view class\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1719927873529</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1719927873529</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Email and views are changed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1719928461267</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1719928461267</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Email and views are changed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1719946992021</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1719946992021</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Email and views are changed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1719948760742</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1719948760742</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"session key is removed and the cart value are stored in the cookies&#10;1. Session key is removed for the model.py &#10;2. cart value are stored in cookies&#10;&#10;carousel was update in cartlist view\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720801802020</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1720801802020</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"cookies name changed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720862621029</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1720862621029</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"calculation are done for carousel in cartliat view&#10;order cancellation and order history api are added\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721137836254</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721137836254</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"cookies cart changed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721292245250</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721292245250</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Elastic Search is updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1721647701332</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1721647701332</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"10\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/partcraft\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"update\" />\r\n    <MESSAGE value=\"Bestselling&#10;created a best selling serializers and view class\" />\r\n    <MESSAGE value=\"Email and views are changed\" />\r\n    <MESSAGE value=\"session key is removed and the cart value are stored in the cookies&#10;1. Session key is removed for the model.py &#10;2. cart value are stored in cookies&#10;&#10;carousel was update in cartlist view\" />\r\n    <MESSAGE value=\"cookies name changed\" />\r\n    <MESSAGE value=\"calculation are done for carousel in cartliat view&#10;order cancellation and order history api are added\" />\r\n    <MESSAGE value=\"cookies cart changed\" />\r\n    <MESSAGE value=\"Elastic Search is updated\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Elastic Search is updated\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/partcraft/parts/views.py</url>\r\n          <line>80</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/partcraft$views.coverage\" NAME=\"views Coverage Results\" MODIFIED=\"1720862278907\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/partcraft/parts\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b1b70f1ffde71730cb20517e2b95f3e89c19c667)
+++ b/.idea/workspace.xml	(date 1721710644135)
@@ -4,9 +4,15 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8a259d45-3f5d-4858-a05d-0f3155ed5749" name="Changes" comment="Elastic Search is updated">
+    <list default="true" id="8a259d45-3f5d-4858-a05d-0f3155ed5749" name="Changes" comment="session key is removed and the cart value are stored in the cookies&#10;1. Session key is removed for the model.py &#10;2. cart value are stored in cookies&#10;&#10;carousel was update in cartlist view">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Changes.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Changes.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/partcraft/parts/documents.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/parts/documents.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/partcraft/partcraft/settings.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/partcraft/settings.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/partcraft/parts/admin.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/parts/admin.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/partcraft/parts/documents.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/partcraft/parts/serializers.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/parts/serializers.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/partcraft/parts/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/parts/urls.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/partcraft/parts/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/partcraft/parts/views.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -25,6 +31,7 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
     <option name="ROOT_SYNC" value="DONT_SYNC" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
   &quot;lastFilter&quot;: {
@@ -38,9 +45,6 @@
     &quot;accountId&quot;: &quot;50aaa3d5-14e2-4a1f-a422-41718d8ff016&quot;
   }
 }</component>
-  <component name="ProblemsViewState">
-    <option name="selectedTabId" value="CurrentFile" />
-  </component>
   <component name="ProjectColorInfo">{
   &quot;customColor&quot;: &quot;&quot;,
   &quot;associatedIndex&quot;: 5
@@ -124,39 +128,7 @@
       <workItem from="1719945704578" duration="3690000" />
       <workItem from="1720074060405" duration="315000" />
       <workItem from="1720861997725" duration="300000" />
-      <workItem from="1720862375324" duration="876000" />
-      <workItem from="1720884895320" duration="2770000" />
-      <workItem from="1721019128201" duration="7817000" />
-      <workItem from="1721049572403" duration="12971000" />
-      <workItem from="1721106606365" duration="18339000" />
-      <workItem from="1721126912414" duration="1094000" />
-      <workItem from="1721128096681" duration="3435000" />
-      <workItem from="1721135835803" duration="4673000" />
-      <workItem from="1721192811505" duration="6267000" />
-      <workItem from="1721221192713" duration="2499000" />
-      <workItem from="1721223702744" duration="2237000" />
-      <workItem from="1721226178247" duration="2056000" />
-      <workItem from="1721233434266" duration="878000" />
-      <workItem from="1721277235521" duration="3643000" />
-      <workItem from="1721284359207" duration="9594000" />
-      <workItem from="1721365924039" duration="8556000" />
-      <workItem from="1721378054834" duration="5540000" />
-      <workItem from="1721383782975" duration="4869000" />
-      <workItem from="1721388839434" duration="2676000" />
-      <workItem from="1721395970836" duration="6112000" />
-      <workItem from="1721404303064" duration="1717000" />
-      <workItem from="1721455452081" duration="12352000" />
-      <workItem from="1721490058026" duration="90000" />
-      <workItem from="1721495049423" duration="325000" />
-      <workItem from="1721495385261" duration="2910000" />
-      <workItem from="1721498366403" duration="1914000" />
-      <workItem from="1721551614738" duration="2363000" />
-      <workItem from="1721568172512" duration="2054000" />
-      <workItem from="1721577981652" duration="1442000" />
-      <workItem from="1721622621132" duration="6001000" />
-      <workItem from="1721633302504" duration="5047000" />
-      <workItem from="1721642741943" duration="4535000" />
-      <workItem from="1721648339426" duration="1585000" />
+      <workItem from="1720862375324" duration="96000" />
     </task>
     <task id="LOCAL-00001" summary="Bestselling&#10;created a best selling serializers and view class">
       <option name="closed" value="true" />
@@ -198,39 +170,7 @@
       <option name="project" value="LOCAL" />
       <updated>1720801802020</updated>
     </task>
-    <task id="LOCAL-00006" summary="cookies name changed">
-      <option name="closed" value="true" />
-      <created>1720862621029</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1720862621029</updated>
-    </task>
-    <task id="LOCAL-00007" summary="calculation are done for carousel in cartliat view&#10;order cancellation and order history api are added">
-      <option name="closed" value="true" />
-      <created>1721137836254</created>
-      <option name="number" value="00007" />
-      <option name="presentableId" value="LOCAL-00007" />
-      <option name="project" value="LOCAL" />
-      <updated>1721137836254</updated>
-    </task>
-    <task id="LOCAL-00008" summary="cookies cart changed">
-      <option name="closed" value="true" />
-      <created>1721292245250</created>
-      <option name="number" value="00008" />
-      <option name="presentableId" value="LOCAL-00008" />
-      <option name="project" value="LOCAL" />
-      <updated>1721292245250</updated>
-    </task>
-    <task id="LOCAL-00009" summary="Elastic Search is updated">
-      <option name="closed" value="true" />
-      <created>1721647701332</created>
-      <option name="number" value="00009" />
-      <option name="presentableId" value="LOCAL-00009" />
-      <option name="project" value="LOCAL" />
-      <updated>1721647701332</updated>
-    </task>
-    <option name="localTasksCounter" value="10" />
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -256,22 +196,7 @@
     <MESSAGE value="Bestselling&#10;created a best selling serializers and view class" />
     <MESSAGE value="Email and views are changed" />
     <MESSAGE value="session key is removed and the cart value are stored in the cookies&#10;1. Session key is removed for the model.py &#10;2. cart value are stored in cookies&#10;&#10;carousel was update in cartlist view" />
-    <MESSAGE value="cookies name changed" />
-    <MESSAGE value="calculation are done for carousel in cartliat view&#10;order cancellation and order history api are added" />
-    <MESSAGE value="cookies cart changed" />
-    <MESSAGE value="Elastic Search is updated" />
-    <option name="LAST_COMMIT_MESSAGE" value="Elastic Search is updated" />
-  </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
-          <url>file://$PROJECT_DIR$/partcraft/parts/views.py</url>
-          <line>80</line>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
+    <option name="LAST_COMMIT_MESSAGE" value="session key is removed and the cart value are stored in the cookies&#10;1. Session key is removed for the model.py &#10;2. cart value are stored in cookies&#10;&#10;carousel was update in cartlist view" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/partcraft$views.coverage" NAME="views Coverage Results" MODIFIED="1720862278907" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/partcraft/parts" />
