@ -0,0 +1,115 @@
views

class vehiclelistview(generics.ListAPIView):
    queryset = Vehicle.objects.all()
    serializer_class = VehicleSerializer

    def list(self, request, *args, **kwargs):
        queryset = self.filter_queryset(self.get_queryset())
        if not queryset.exists():
            raise NotFound(detail="No Vehicle found matching the criteria.")
        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)


@api_view(['POST', 'GET'])
def vehicle_view(request):
    if request.method == 'POST':
        vehicleserializer = VehicleoneSerializer(data=request.data)
        if vehicleserializer.is_valid():
            try:
                vehicle = Vehicle.objects.filter(
                    vehicle_name=vehicleserializer.validated_data['vehicle_name'],
                    vehicle_variant=vehicleserializer.validated_data['vehicle_variant'],
                    vehicle_model=vehicleserializer.validated_data['vehicle_model'],
                    vehicle_year=vehicleserializer.validated_data['vehicle_year'],
                )
                v = []
                for i in vehicle:
                    this_part = Product.objects.filter(this_parts_fits=i)
                    productserializer = ProductSerializer(this_part, context={'request': request}, many=True)
                    v.append(productserializer.data)

                lastdata = adddict(productserializer)

                vehicle_data = VehicleoneSerializer(vehicle, many=True, context={'request': request}).data

                response = Response({'vehicle': vehicleserializer.data, 'parts': lastdata}, status=status.HTTP_200_OK)
                response.set_cookie('vehicle', json.dumps(vehicle_data))
                print("cookies set response:")
                for key, value in response.cookies.items():
                    print(f"{key}, {value}")
                return response
            except Vehicle.DoesNotExist:
                return Response({'data': 'Vehicle not found.'}, status=status.HTTP_404_NOT_FOUND)
        else:
            return Response(vehicleserializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'GET':
        queryset = Vehicle.objects.all()
        serializer = VehicleSerializer(queryset, many=True, context={'request': request})
        return Response({'data':serializer.data}, status=status.HTTP_200_OK)


class vehicleoneview(generics.ListAPIView):
    serializer_class = ProductSerializer

    def get_queryset(self):
        vehicle_id = self.kwargs.get('pk')
        vehicle = Vehicle.objects.get(id=vehicle_id)
        queryset = Product.objects.all().filter(this_parts_fits=vehicle)
        return queryset

    def list(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        vehicle_id = self.kwargs.get('pk')
        vehicle = Vehicle.objects.get(id=vehicle_id)
        if not queryset.exists():
            return Response({'details': 'Product Not Found'}, status=status.HTTP_404_NOT_FOUND)
        serializer = self.get_serializer(queryset, many=True, context={'request': request})
        vehicle_serializer = VehicleSerializer(vehicle, context={'request': request})
        lastdata = adddict(serializer)
        return Response({'data': vehicle_serializer.data, 'parts': lastdata}, status=status.HTTP_200_OK)


class MatchVehicle(APIView):
    def post(self, request, *args, **kwargs):
        year = request.data.get('year')
        model = request.data.get('model')

        filters = {}
        if year:
            if isinstance(year,(int,str)):
                year = int(year)
                filters['vehicle_year'] = year
            else:
                return Response({'details': 'Invalid format of year'}, status=status.HTTP_400_BAD_REQUEST)

        if model:
            if isinstance(model, str):
                filters['vehicle_model'] = model
            else:
                return Response({'details': 'Invalid of model'}, status=status.HTTP_400_BAD_REQUEST)

        vehicles = Vehicle.objects.filter(**filters)
        if not vehicles.exists():
            return Response({'details': 'Vehicle Not Found'}, status=status.HTTP_404_NOT_FOUND)
        serializer = VehicleSerializer(vehicles, many=True, context={'request': request})
        return Response({'data': serializer.data}, status=status.HTTP_200_OK)



#serializer

class VehicleSerializer(serializers.ModelSerializer):
    url = serializers.HyperlinkedIdentityField(view_name='vehicleonedetail')

    class Meta:
        model = Vehicle
        fields = ['vehicle_name', 'vehicle_model', 'vehicle_year', 'vehicle_variant', 'url']


class VehicleoneSerializer(serializers.ModelSerializer):
    class Meta:
        model = Vehicle
        fields = ['vehicle_name', 'vehicle_model', 'vehicle_year', 'vehicle_variant']